filelist,
function(filename) {
#--- Load ALL the information from the file contents and name ----
source("Function Load.R")         # For fn "Load File"
# Load the filedata
filedata <- LoadFile(filename, foldername)
# Determine the metadata (Re and AoA)
# Note: Future dev: time
# Re = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
# AoA = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
# cat(paste(Re, AoA, "\n"))
# if (!is.null(foldername)) {
#   filepath = paste(foldername, filename, sep = "/")}
#
# filepath = paste(foldername, filename, sep = "/")
# rstart = grep("DT=", readLines(filepath))[1]
# rend = grep(" 1 ", readLines(filepath))[1]
# # Read the data from the filepath given
# filedata <- read.table(filepath, sep = " ",
#                        skip = rstart,
#                        nrow = rend - rstart - 1)
#
# print(paste(foldername, filename, sep = "/", rstart, rend))
},
cl = cl
)
stopCluster(cl)
thread <- pbapply::pblapply( #pblapplycl(
filelist,
function(filename) {
#--- Load ALL the information from the file contents and name ----
source("Function Load.R")         # For fn "Load File"
# Load the filedata
filedata <- LoadFile(filename, foldername)
# Determine the metadata (Re and AoA)
# Note: Future dev: time
# Re = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
# AoA = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
# cat(paste(Re, AoA, "\n"))
# if (!is.null(foldername)) {
#   filepath = paste(foldername, filename, sep = "/")}
#
# filepath = paste(foldername, filename, sep = "/")
# rstart = grep("DT=", readLines(filepath))[1]
# rend = grep(" 1 ", readLines(filepath))[1]
# # Read the data from the filepath given
# filedata <- read.table(filepath, sep = " ",
#                        skip = rstart,
#                        nrow = rend - rstart - 1)
#
# print(paste(foldername, filename, sep = "/", rstart, rend))
},
cl = cl
)
cl <- makeCluster(detectCores(), outfile = logfile)               # start the cluster
clusterExport(cl, c("airfoildata", "foldername"))                 # add airfoildata to the cluster threads
# Thread calculation
thread <- pbapply::pblapply( #pblapplycl(
filelist,
function(filename) {
#--- Load ALL the information from the file contents and name ----
source("Function Load.R")         # For fn "Load File"
# Load the filedata
filedata <- LoadFile(filename, foldername)
# Determine the metadata (Re and AoA)
# Note: Future dev: time
# Re = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
# AoA = as.numeric(
#   unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
# cat(paste(Re, AoA, "\n"))
# if (!is.null(foldername)) {
#   filepath = paste(foldername, filename, sep = "/")}
#
# filepath = paste(foldername, filename, sep = "/")
# rstart = grep("DT=", readLines(filepath))[1]
# rend = grep(" 1 ", readLines(filepath))[1]
# # Read the data from the filepath given
# filedata <- read.table(filepath, sep = " ",
#                        skip = rstart,
#                        nrow = rend - rstart - 1)
#
# print(paste(foldername, filename, sep = "/", rstart, rend))
},
cl = cl
)
stopCluster(cl)
filename = filelist[1]
source("Function Load.R")         # For fn "Load File"
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Load Data.R', echo=TRUE)
cl <- makeCluster(detectCores(), outfile = logfile)               # start the cluster
clusterExport(cl, c("airfoildata", "foldername"))                 # add airfoildata to the cluster threads
# Thread calculation
thread <- pbapply::pblapply( #pblapplycl(
filelist,
function(filename) {
#--- Load ALL the information from the file contents and name ----
source("Function Load Data.R")         # For fn "Load File"
# Load the filedata
filedata <- LoadFile(filename, foldername)
Determine the metadata (Re and AoA)
Note: Future dev: time
Re = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
AoA = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
cat(paste(Re, AoA, "\n"))
},
cl = cl
)
stopCluster(cl)
#--- Initialise the cluster ----
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
cl <- makeCluster(detectCores(), outfile = logfile)               # start the cluster
clusterExport(cl, c("airfoildata", "foldername"))                 # add airfoildata to the cluster threads
# Thread calculation
thread <- pbapply::pblapply( #pblapplycl(
filelist,
function(filename) {
#--- Load ALL the information from the file contents and name ----
source("Function Load Data.R")         # For fn "Load File"
# Load the filedata
filedata <- LoadFile(filename, foldername)
# Determine the metadata (Re and AoA)
# Note: Future dev: time
Re = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
AoA = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
cat(paste(Re, AoA, "\n"))
},
cl = cl
)
stopCluster(cl)
source("Function Airfoil Profile")      # For fn "airfoilcoord", etc
source("Function Airfoil Profile.R")      # For fn "airfoilcoord", etc
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
environment()
list2env(airfoildata, envir = environment())
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
source("Function Interpolations.R")
InterpPoint
airfoilmesh <- InterpPoint(omesh, airfoilcoord, varnames = "P")
rm(filedata)
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
filename = filelist[1]
omesh <- LoadFile(filename, foldername)
Re = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
AoA = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
source("Function Airfoil Profile.R")      # For fn "airfoilcoord", etc
list2env(airfoildata, envir = environment())
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
source("Function Interpolations.R")
airfoilmesh <- InterpPoint(omesh, airfoilcoord, varnames = "P")
InterpPoint(omesh, airfoilcoord)
plot_pressure = ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
scale_y_reverse() +
scale_color_manual("Surface", values = c("#F8766D", "#00BBCC"), labels = c("Lower","Upper")) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
plot_pressure
LoadFile <- function(filename, foldername = NULL) {
# Determine the metadata
Re = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
AoA = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
# Concatenate to find the correct filename
if (!is.null(foldername)) {}
filepath = paste(foldername, filename, sep = "/")
# print(filepath)
# Determine the starting and ending lines
rstart = grep("DT=", readLines(filepath))[1]
rend = grep(" 1 ", readLines(filepath))[1]
# Read the data from the filepath given
filedata <- read.table(filepath, sep = " ",
skip = rstart,
nrow = rend - rstart - 1)
# Re-shape the data into correct columns
filedata <- as.data.frame(matrix(c(t(filedata[2:6])), ncol=6))
# Give the columns of the data appropriate names
colnames(filedata) <- c("x", "y", "U", "V", "P", "vort_xy_plane")
# Combind the filedata and metadata into one list
filedata <- list(
ID = paste0("Re", sprintf("%04d", Re),
"AoA", sprintf("%03d", AoA)),
Re = Re,
AoA = AoA,
filepath = filepath,
omesh = filedata
)
# Return the data from the file
return(filedata)
}
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
filename = filelist[1]
#--- Load ALL the information from the file contents and name ----
source("Function Load Data.R")          # For fn "Load File"
# Load the filedata as 'omesh'
filedata <- LoadFile(filename, foldername)
# Determine the metadata (Re and AoA)
# Note: Future dev: time
Re = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "Re"))[2], "AoA"))[1])
AoA = as.numeric(
unlist(strsplit(unlist(strsplit(filename, "AoA"))[2], ".dat"))[1])
#--- Run Airfoil Calculations ----
source("Function Airfoil Profile.R")      # For fn "airfoilcoord", etc
list2env(airfoildata, envir = environment())
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
#--- Coefficient of Pressure ----
source("Function Interpolations.R")
airfoilmesh <- InterpPoint(omesh, airfoilcoord, varnames = "P")
list2env(filedata, envir = environment()); rm(filedata)
list2env(airfoildata, envir = environment()); rm(airfoildata)
airfoilmesh <- InterpPoint(omesh, airfoilcoord, varnames = "P")
InterpPoint
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
list2env(cl, envir=environment())
list2env(airfoildata, envir=environment())
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source("Function pblapply.R")
rm(PrintThread())
rm(PrintThread
PrintThreadProgress <- function(msg) {
cat(paste(thread, ID, format(Sys.time(), "%X"), "|", msg, "\n"))
}
PrintThreadProgress <- function(msg) {
cat(paste(thread, ID, format(Sys.time(), "%X"), "|", msg, "\n"))
}
?case
?cast
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function pblapply.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
set <- getAllConnections()
thread <-  unlist(summary.connection(set[length(set)]))[1]
thread
?sys.source
sys.source()
sys.status()
Sys.info()
Sys.info()$nodename
asdf <- Sys.info()
Sys.info()[4]
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
logfile
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
?log
?cat
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
Split <- splitpb(10, 4, nout = 100)
length(Split)
?system.time
system.time
proc.time()
Sys.time()
t <- Sys.time()
ppt(Sys.time() - time)
Sys.time() - time
Sys.time() - t
asdf <- (Sys.time() - t)
asdf <- (Sys.time() - t)
asdf
asdf
asdf = (Sys.time() - t)
asfd
asdf
difftime(Sys.time() - t)
s = Sys.time()
difftime(s - t)
class(s)
s - t
format(Sys.time() - t, "Total time elapsed: %T")
format(Sys.time() - t, "%T")
format(s - t, "%T")
difftime(s - t, tz = Sys.timezone())
unclass(t)
difftime(unclass(s), unclass(t))
?system.time
system.time
?proc.time
class(proc.time)
a <- proc.time()
a
print(a)
cat(a)
print(proc.time() - a)
125.6 / 0.18
8325.26/37.28
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
?print
cat(print(proc.time()))
print(proc.time())
time(8588.35)
?time
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
system.time(source("Rough Parallel Runs.R"))
system.time(source("Rough Parallel Runs.R"))
system.time(source("Rough Parallel Runs.R"))
system.time(source("Rough Parallel Runs.R"))
system.time(source("Rough Parallel Runs.R"))
ThreadProgress <- function(threadname = "", ID = "", msg, i, B) {
if (!is.null(msg)) {
cat(paste(threadname, ID, format(Sys.time(), "%X"), "|",
msg, round(i/B * 100, 0), "%", "\n"))
}
}
print(NULL)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function pblapply.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
pblapplycl(c(1:10), sqrt, log = logfile, msgID = ID, msg = "hi")
ID = "hi"
pblapplycl(c(1:10), sqrt, log = logfile, msgID = ID, msg = "hi")
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function pblapply.R', echo=TRUE)
pblapplycl(c(1:10), sqrt, log = logfile, msgID = ID, msg = "hi")
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
1 + NULL
pblapplycl(c(1:10), sqrt, log = logfile, msgID = ID, msg = "hi")
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source("Function Airfoil Normals.R")
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function pblapply.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
cat("hi", file = logfile)
cat("hi", file = logfile)
file.list()
filelist()
list.files()
wd()
getwd()
setwd ("//ad.monash.edu/home/User032/awan39/Documents")
list.files()
setwd ("//ad.monash.edu/home/User032/awan39")
list.files()
setwd ("//ad.monash.edu/home/User032/awan39/Desktop")
list.files()
getwd()
setwd ("//ad.monash.edu/home/User032/jjche39/Desktop")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Function Load Packages.R")      # For required packages
source("Function pblapply.R")           # For PrintThreadProgress
source("Function Load Data.R")          # For fn "Load File"
filedata <- LoadFile(filename, foldername)
filename = filelist[1]
source("Function Airfoil Profile.R")    # For fn "AirfoilCoord", etc
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); rm(filedata)       # N.B: local so must be passed as fn input
source("Function Interpolations.R")     # For fn "InterpPoint", etc
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
source("Function Airfoil Normals.R")    # For "AirfoilGrads", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
lapply(
xvec,
)
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
# Upper Surface
interpvalU <- pblapply(xvec, function(x) {
lvec = NormalPoint(x, dist, AoA, surf = "upper")
interp <- InterpProj(omesh, lvec, plotsurf = TRUE)
return(interp)}
)
ThreadProgress(threadname, Re, AoA, "Interpolation along Normals to Upper Surface Calculated")
# Lower Surface
interpvalL <- pblapply(xvec, function(x) {
lvec = NormalPoint(x, dist, AoA, surf = "lower")
interp <- InterpProj(omesh, lvec, plotsurf = TRUE)
return(interp)}
)
ThreadProgress(threadname, Re, AoA, "Interpolation along Normals to Lower Surface Calculated")
interpvalLong <- bind_rows(c(interpvalU, interpvalL))
threadname <- ThreadName()
interpvalLong
?rep
rep(xvec, times = 3)
rep(xvec, each = 3)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xO))
)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- rbind(
rep(interpLongLong, times = 2),
surf = rep(c("upper", "lower"), each = nrow(interpLongLong))
)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- rbind(
rep(interpLongLong, times = 2),
surf = rep(c("upper", "lower"), each = nrow(interpLongLong))
)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
length(surf = rep(c("upper", "lower"), each = nrow(interpLongLong)))
length(rep(c("upper", "lower"), each = nrow(interpLongLong)))
nrow(interpLongLong, times = 2)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- rbind(
rbind(interpLongLong, interpLongLong),
surf = rep(c("upper", "lower"), each = nrow(interpLongLong))
)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- rbind(
rbind(interpLongLong, interpLongLong),
surf = rep(c("upper", "lower"), each = nrow(interpLongLong))
)
head(interpLongLong)
interpLongLong <- data.frame(
xO = rep(xvec, each = length(dist)),
dist = rep(dist, times = length(xvec))
)
interpLongLong <- cbind(
rbind(interpLongLong, interpLongLong),
surf = rep(c("upper", "lower"), each = nrow(interpLongLong))
)
head(interpLongLong)
asdf <- InterpProj(omesh, interpLongLong$xO, dist = interpLongLong$dist, AoA, surf = interpLongLong$surf)
InterpProj
NormalPoint()
NormalPoint
asdf <- NormalPoint(interpLongLong$xO, dist = interpLongLong$dist, AoA, surf = interpLongLong$surf)
View(lvec)
