3 * apply(integrand, 2, sum) -
apply(integrand[rep(c(TRUE, FALSE, FALSE), length.out = length.out),], 2, sum) -
1 * integrand[1,] -
1 * integrand[length.out,]) *
thickness/length.out
return(distances)
}
xO = -0.2
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0.4
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
BLIntegrals <- function(omesh, xO, thickness, blU, surf, AoA, gradint = gradint, length.out = 2e5) {
# Use Simpson's 3/8 Rule
length.out = length.out + (4 - length.out%% 3)
# Interpolate
dist = seq(0, thickness, length.out = length.out)
lvec = NormalPoint(xO, dist, AoA, surf, gradint = gradint)
interp = InterpProj(omesh, lvec, varnames = c("U", "V"))
# Find the integrands
integrand <- interp %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dispthick, momethick, kinethick)
# Using 3/8 rule
# distances <- 3/8* (
#   3 * apply(integrand, 2, sum) -
#   apply(integrand[rep(c(TRUE, FALSE, FALSE), length.out = length.out),], 2, sum) -
#   1 * integrand[1,] -
#   1 * integrand[length.out,]) *
#   thickness/length.out
# Using 1/2 rule
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out]) *
thickness/length.out
return(distances)
}
xO = -0.2
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
BLIntegrals <- function(omesh, xO, thickness, blU, surf, AoA, gradint = gradint, length.out = 2e5) {
# Use Simpson's 3/8 Rule
length.out = length.out + (4 - length.out%% 3)
# Interpolate
dist = seq(0, thickness, length.out = length.out)
lvec = NormalPoint(xO, dist, AoA, surf, gradint = gradint)
interp = InterpProj(omesh, lvec, varnames = c("U", "V"))
# Find the integrands
integrand <- interp %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dispthick, momethick, kinethick)
# Using 3/8 rule
# distances <- 3/8* (
#   3 * apply(integrand, 2, sum) -
#   apply(integrand[rep(c(TRUE, FALSE, FALSE), length.out = length.out),], 2, sum) -
#   1 * integrand[1,] -
#   1 * integrand[length.out,]) *
#   thickness/length.out
# Using 1/2 rule
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
thickness/length.out
return(distances)
}
xO = -0.2
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0.4
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
BLIntegrals <- function(omesh, xO, thickness, blU, surf, AoA, gradint = gradint, length.out = 2e5) {
# Use Simpson's 3/8 Rule
length.out = length.out + (4 - length.out%% 3)
# Interpolate
dist = seq(0, thickness, length.out = length.out)
lvec = NormalPoint(xO, dist, AoA, surf, gradint = gradint)
interp = InterpProj(omesh, lvec, varnames = c("U", "V"))
# Find the integrands
integrand <- interp %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dispthick, momethick, kinethick)
# Using 3/8 rule
distances <- 3/8* (
3 * apply(integrand, 2, sum) -
apply(integrand[rep(c(TRUE, FALSE, FALSE), length.out = length.out),], 2, sum) -
1 * integrand[1,] -
1 * integrand[length.out,]) *
thickness/length.out
# # Using 1/2 rule
# distances <- (
#   apply(integrand, 2, sum) -
#   1/2 * integrand[1,] -
#   1/2 * integrand[length.out,]) *
#   thickness/length.out
return(distances)
}
xO = -0.2
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
xO = 0.4
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
thickness = blthickness$thickness
blU = blthickness$blU
system.time(blintegrals <- BLIntegrals(omesh, xO, thickness, blU, surf = surf, AoA, gradint = gradint))
blintegrals
BLIntegrals <- function(omesh, xO, thickness, blU, surf, AoA, gradint = gradint, length.out = 2e5) {
# Use Simpson's 3/8 Rule
length.out = length.out + (4 - length.out%% 3)
# Interpolate
dist = seq(0, thickness, length.out = length.out)
lvec = NormalPoint(xO, dist, AoA, surf, gradint = gradint)
interp = InterpProj(omesh, lvec, varnames = c("U", "V"))
# Find the integrands
integrand <- interp %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dispthick, momethick, kinethick)
# # Using 3/8 rule
# distances <- 3/8* (
#   3 * apply(integrand, 2, sum) -
#   apply(integrand[rep(c(TRUE, FALSE, FALSE), length.out = length.out),], 2, sum) -
#   1 * integrand[1,] -
#   1 * integrand[length.out,]) *
#   thickness/length.out
# Using trapezium rule
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
thickness/length.out
return(distances)
}
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
load("C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Working_Data/SingleThreadTest2.RData")
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
xvec = c(-0.4, 0, 0.4)
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_BL_Rough
#--- Boundary Layer Thicknesses ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.25), cylinder = TRUE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_BL_Rough
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_BL_Rough
blvalLong
blvalLong
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Thread Function Calls.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(parallelCluster)
print("Airfoil COordinates Plotted") # Print----
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Thread Function Calls.R', echo=TRUE)
print("Boundary Layers Plotted") # Print----
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(parallelCluster)
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
filedata = folderdata[[1]]
omesh = filedata
threaddata = filedata
list2env(threaddata)
omesh = filedata
list2env(threaddata, envir = .GlobalEnv)
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
print("Files Loaded") # Print----
save.image("C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Working_Data/SingleThreadTest3.RData")
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
omesh = filedata
# Airfoil coordinates
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Airfoil COordinates Plotted") # Print----
plot_airfoil
#--- Interpolation on Airfoil ----
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
plot_pressure = ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
ggsave(paste0(ID, "_Pressure.png"), plot = plot_pressure, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Pressure on Airfoil Plotted") # Print----
plot_pressure
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
# Upper Surface
interpvalU <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, AoA, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
#Lower Surface
interpvalL <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, AoA, surf = "lower")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpvalLong <- bind_rows(c(interpvalU, interpvalL))
#U' Plot
plot_Udash_Rough <- ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: U'"))
ggsave(paste0(ID, "_Udash_Rough.png"), plot = plot_Udash_Rough, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
# V'plot
plot_Vdash_Rough <- ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Vdash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("V'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: V'"))
ggsave(paste0(ID, "_Vdash_Rough.png"), plot = plot_Vdash_Rough, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("U' and V' Plotted") # Print----
#--- Boundary Layer Thicknesses ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf)),
size = 1.2) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
print("Boundary Layers Plotted") # Print----
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
print("Files Loaded") # Print----
#--- Airfoil profile and plot ----
# Airfoil coordinates
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Airfoil COordinates Plotted") # Print----
#--- Interpolation on Airfoil ----
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
plot_pressure = ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
ggsave(paste0(ID, "_Pressure.png"), plot = plot_pressure, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Pressure on Airfoil Plotted") # Print----
#--- Interpolation on Normals ----
# xvec by = 0.05 and dist = 0.05 approx 2min for U and 2min for L on my laptop
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
# Upper Surface
interpvalU <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, AoA, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
?ggsave
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
xvec
xO = xvec[1]
surf = "upper"
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
upper = 18
blresult = OptimDom(omesh, xO, surf, AoA, gradint = gradint, upper = upper, target = 0)
blU = blresult$Udash - abs(blresult$Udash)*0.01
blU
blresult
