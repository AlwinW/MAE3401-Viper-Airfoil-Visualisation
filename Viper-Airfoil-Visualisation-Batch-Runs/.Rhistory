### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0))
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj)
plotsurf
plotsurf = TRUE
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
# mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
# mutate(adj = plotsurf & adj)
mutate(surfn = ifelse(plotsurf == FALSE & surf == "upper" & dely > 0, "upper", "lower")) %>%
mutate(surfn = ifelse(plotsurf == FALSE & surf == "lower" & dely < 0, "lower", "upper")) %>%
mutate(surf = surfn) %>%
select(-surfn)
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj)
plotsurf = FALSE
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj)
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj, ifelse(surf == "upper", "lower", "upper"), surf))
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf))
plotsurf = TRUE
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf))
lmesh$surf
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
# mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
# mutate(adj = plotsurf & adj) %>%
# mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf))
mutate(surf = as.character(surf)) %>%
mutate(surfn = ifelse(plotsurf == FALSE & surf == "upper" & dely > 0, "upper", "lower")) %>%
mutate(surfn = ifelse(plotsurf == FALSE & surf == "lower" & dely < 0, "lower", "upper"))
plotsurf
(TRUE == FALSE & "lower" == "lower" & -0.0008791847 < 0, "lower", "upper")
(TRUE == FALSE & "lower" == "lower" & -0.0008791847 < 0, "lower" < "upper")
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(surf = as.character(surf)) %>%
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf))
plotsurf = FALSE
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(surf = as.character(surf)) %>%
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf))
plotsurf = FALSE
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(surf = as.character(surf)) %>%
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf)) %>%
select(-adj) %>%
# Um and Vm using vector projections
mutate(Umdash = sqrt((1 - (delx)/dist^2 * delx)^2 + (-(delx)/dist^2 * dely)^2),
Vmdash = (delx)/dist) %>%
# Udash and Vdash found by using vector projections
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist) %>%
# Correct values at the surface
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
# sign of Udash found by cross product, upper vs lower
mutate(Udash = sign(dely*U - delx*V) * ifelse(surf == "upper", 1, -1) * Udash,
Umdash = sign(dely) * ifelse(surf == "upper", 1, -1) * Umdash) %>%
# Normalised velocity ratio
mutate(UUmdash = Udash/Umdash,
VVmdash = Vdash/Vmdash)
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(surf = as.character(surf)) %>%
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf)) %>%
select(-adj) %>%
# Um and Vm using vector projections
mutate(Umdash = sqrt((1 - (delx)/dist^2 * delx)^2 + (-(delx)/dist^2 * dely)^2),
Vmdash = (delx)/dist) %>%
# Udash and Vdash found by using vector projections
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist) %>%
# Correct values at the surface
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
# sign of Udash found by cross product, upper vs lower
mutate(Udash = sign(dely*U - delx*V) * ifelse(surf == "upper", 1, -1) * Udash,
Umdash = sign(dely) * ifelse(surf == "upper", 1, -1) * Umdash) %>%
# Normalised velocity ratio
mutate(UUmdash = Udash/Umdash,
VVmdash = Vdash/Vmdash)
plotsurf = T
lmesh %>%
### IF ELSE CAUSING FUNNY BEHAVIOUR, NEED EXTRA LINES OF CODE
mutate(surf = as.character(surf)) %>%
mutate(adj = (surf == "upper" & dely < 0) | (surf == "lower" & dely > 0)) %>%
mutate(adj = plotsurf & adj) %>%
mutate(surf = ifelse(adj == FALSE, ifelse(surf == "upper", "lower", "upper"), surf)) %>%
select(-adj) %>%
# Um and Vm using vector projections
mutate(Umdash = sqrt((1 - (delx)/dist^2 * delx)^2 + (-(delx)/dist^2 * dely)^2),
Vmdash = (delx)/dist) %>%
# Udash and Vdash found by using vector projections
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist) %>%
# Correct values at the surface
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
# sign of Udash found by cross product, upper vs lower
mutate(Udash = sign(dely*U - delx*V) * ifelse(surf == "upper", 1, -1) * Udash,
Umdash = sign(dely) * ifelse(surf == "upper", 1, -1) * Umdash) %>%
# Normalised velocity ratio
mutate(UUmdash = Udash/Umdash,
VVmdash = Vdash/Vmdash)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Script All Functions.R', echo=TRUE)
interpnorms <- InterpProj(omesh, lvec, plotsurf = FALSE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation)
interpnorms
#--- Separation and Stagnation Points ----
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = FALSE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation)
filename = filelist[1]
#--- Set-up ----
# Source required scripts for functions
source("Script All Functions.R")
source("Script Plots.R")
# Threadname
threadname <- ThreadName()
#--- Load the Data ---
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment());
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = FALSE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation)
stagnation
xO2chord(stagnation$xO)
xO2chord(stagnation$xO, stagnation$surf)
--- Set-up ----
# Source required scripts for functions
source("Script All Functions.R")
source("Script Plots.R")
# Threadname
threadname <- ThreadName()
#--- Load the Data ---
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); # rm(filedata)       # N.B: local so must be passed as fn input
#--- >> File Data Loaded ----
ThreadProgress(threadname, Re, AoA, "File Data Loaded
---------------------------------------------------------------")
#--- Run Airfoil Calculations ----
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
# Plots
plot_Norm_Udash = PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
plot_Norm_Vdash = PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.8, 0.8, Re, AoA, "V'")
plot_Norm_UUmdash = PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
plot_Norm_VVmdash = PlotAirfoil(interpnorms, airfoilcoord, "VVmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "V'/Vm'")
plot_Norm_Udash
plot_Norm_Vdash
plot_Norm_UUmdash
plot_Norm_VVmdash
plot_Norm_Udash
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Script All Functions.R', echo=TRUE)
stopCluster(cl)
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation, size = 1.5)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = FALSE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
stagnation
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation, size = 1.5)
stagnation$Uclock
stagnation$sign
stagnation$xO
xO2chord(stagnation$xO, stagnation$surf)
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation, size = 3)
which(stagnation$sign != 1 & !is.na(stagnation$sign))
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
which(stagnation$sign != 1 & !is.na(stagnation$sign))
stagnation[290:295,]
View(stagnation[290:295,])
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
plot_test <- ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation, size = 3)
plot_test
stagnation
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
which(stagnation$sign != 1 & !is.na(stagnation$sign))
View(stagnation[290:295,])
source("Script All Functions.R")
source("Script Plots.R")
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); # rm(filedata)       # N.B: local so must be passed as fn input
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.8, 0.8, Re, AoA, "V'")
PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
PlotAirfoil(interpnorms, airfoilcoord, "Umdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Script All Functions.R', echo=TRUE)
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
#--- Separation and Stagnation Points ----
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
stagnation
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_line() +
geom_point(data = stagnation, size = 3)
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_path() +
geom_point(data = stagnation, size = 3)
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = dist) +
geom_path()
ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = dist)) +
geom_path()
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01))
ggplot(stagnation,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = dist)) +
geom_path()
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist))
ggplot(stagnation,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = dist)) +
geom_path()
interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord)
head(stagnation$chord, 20)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
stagnation
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
plot_test <- ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_path() +
geom_point(data = stagnation, size = 3)
plot_test
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
plot_test <- ggplot(interpnorms,
aes(x = chord, y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_path() +
geom_point(data = stagnation, size = 3)
ilename = filelist[2]
#--- Set-up ----
# Source required scripts for functions
source("Script All Functions.R")
source("Script Plots.R")
# Threadname
threadname <- ThreadName()
#--- Load the Data ---
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment());
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
filename = filelist[2]
filename = filelist[2]
filename
source("Script All Functions.R")
source("Script Plots.R")
threadname <- ThreadName()
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); # rm(filedata)       # N.B: local so must be passed as fn input
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
#--- Separation and Stagnation Points ----
xvec = AirfoilSamp(seq(a, a+c, by = 1e-3), cylinder = TRUE)
dist = c(2e-3, 1.1e-3)
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE) %>%
mutate(Uclock = ifelse(surf == "upper", 1, -1) * Udash)
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
plot_test <- ggplot(interpnorms,
aes(x = chord, y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_path() +
geom_point(data = stagnation, size = 3)
plot_test
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
mutate(chord = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
arrange(chord) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
stagnation
plot_test <- ggplot(interpnorms,
aes(x = ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf), y = Uclock,
group = interaction(surf, dist),
colour = surf, linetype = as.factor(dist))) +
geom_path() +
geom_point(data = stagnation, size = 3)
plot_test
stagnation <- interpnorms %>%
ungroup() %>%
filter(dist == min(dist), abs(Udash < 0.01)) %>%
arrange(ifelse(surf == "upper", 1, -1)*xO2chord(xO, surf)) %>%
mutate(sign = sign(Uclock * lag(Uclock, 1)))
stagnation = stagnation[which(stagnation$sign != 1 & !is.na(stagnation$sign)),]
stagnation
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Script Plots.R', echo=TRUE)
plot_stag = PlotStag(interpnorms, stagnation, Re, AoA)
plot_stag
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Script Parallel Runs.R', echo=TRUE)
