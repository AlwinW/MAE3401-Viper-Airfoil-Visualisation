geom_line(data = blasius[blasius$eta <= 3.5,], aes(x = eta, y = uU, colour = "B")) +
geom_point(data = testplotL, aes(x = x, y = y, colour = "L")) +
geom_point(data = testplotS, aes(x = x, y = y, colour = "S")) +
xlim(2.5,  3.5) +
ylim(0.75, 1)
ggplot() +
geom_line(data = blasius[blasius$eta <= 3.5,], aes(x = eta, y = uU, colour = "B")) +
geom_point(data = testplotL, aes(x = x, y = y, colour = "L")) +
geom_point(data = testplotS, aes(x = x, y = y, colour = "S")) +
xlim(2.5,  3.5) +
ylim(0.75, 0.95)
velprofile <- velprofile %>%
mutate(eta = sqrt(Re * (x - a)) * dist/x)
theory <- as.data.frame(
spline(x = blasius$eta, y = blasius$uU, xout = velprofile$eta))
velprofile <- cbind(
velprofile, UUmblasius = theory$y
)
theory$y
class(theory$y)
nrow(theory$y)
length(theory$y)
nrow(velprofile)
velprofile <- data.frame(velprofile, UUmblasius = theory$y)
ggplot(data = velprof, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
# geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05))
velprofile <- data.frame(velprofile, UUmblasius = theory$y)
velprofile$UUmblasius
plot(velprofile$eta, velprofile$UUmblasius)
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
# geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
# geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
velprofile <- velprofile %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
theory <- as.data.frame(
spline(x = blasius$eta, y = blasius$uU, xout = velprofile$eta))
velprofile <- data.frame(velprofile, UUmblasius = theory$y)
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
# geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
#--- Velocity Profil Calculations ----
# Domain for plotting
sep = 0.1
xvec = c(-0.497, seq(a + sep, a + c - sep, by = sep), 0.499)
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
# Results (interpolation)
lvec <- NormalLvec(xvec, NormalSamp(seq(0, distmax, length.out = 50)), AoA)
velprofile <- InterpProj(omesh, lvec, linear = TRUE)
# Blasius Soln
blasius <- data.frame(
eta = seq(0, 8, by = 0.5),
uU = c(0.000, 0.1659, 0.3298, 0.4868, 0.6298, 0.7513, 0.8461, 0.9131, 0.9555,
0.9795, 0.9916, 0.9969, 0.9990, 0.9997, 0.9999, 1.000, 1.000))
testplotS <- as.data.frame(spline(x = blasius$eta, y = blasius$uU, xout = seq(0, 8, by = 0.1)))
velprofile <- velprofile %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
theory <- as.data.frame(
spline(x = blasius$eta, y = blasius$uU, xout = velprofile$eta))
velprofile <- data.frame(velprofile, UUmblasius = theory$y)
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
# geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
lvec <- lvec %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
theory <- as.data.frame(
spline(x = blasius$eta, y = blasius$uU, xout = lvec$eta))
lvec <- data.frame(lvec, UUmblasius = theory$y)
lvec <- lvec %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
vptheory <- as.data.frame(
spline(x = blasius$eta, y = blasius$uU, xout = lvec$eta))
vptheory <- data.frame(lvec, UUmblasius = vptheory$y) %>%
mutate(UUmblasius = ifelse(eta >= 8, 1, UUmblasius))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * 0.05), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * 0.05)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
1/0.05
1/0.075
1/0.75
1/15
1/16
#--- Velocity Profil Calculations ----
# Domain for plotting
sep = 0.2
xvec = c(-0.497, seq(a + sep, a + c - sep, by = sep), 0.499)
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
# Results (interpolation)
lvec <- NormalLvec(xvec, NormalSamp(seq(0, distmax, length.out = 50)), AoA)
velprofile <- InterpProj(omesh, lvec, linear = TRUE)
# ADD A SECOND FACTOR, <= BL soln -> overlay it with a second alpha
# Blasius Soln
blasius <- data.frame(
eta = seq(0, 8, by = 0.5),
uU = c(0.000, 0.1659, 0.3298, 0.4868, 0.6298, 0.7513, 0.8461, 0.9131, 0.9555,
0.9795, 0.9916, 0.9969, 0.9990, 0.9997, 0.9999, 1.000, 1.000))
lvec <- lvec %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
vptheory <- as.data.frame(spline(x = blasius$eta, y = blasius$uU, xout = lvec$eta))
vptheory <- data.frame(lvec, UUmblasius = vptheory$y) %>%
mutate(UUmblasius = ifelse(eta >= 8, 1, UUmblasius))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/16), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/16)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
0.2/16
0.1/0.5
0.1/0.75
0.2/0.15
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/0.15), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/0.15)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/15), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/15)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/2), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/2)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.6) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/1.5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.8) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/1.5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
# Domain for plotting
sep = 0.1
xvec = c(-0.497, seq(a + sep, a + c - sep, by = sep), 0.499)
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
# Results (interpolation)
lvec <- NormalLvec(xvec, NormalSamp(seq(0, distmax, length.out = 50)), AoA)
velprofile <- InterpProj(omesh, lvec, linear = TRUE)
# ADD A SECOND FACTOR, <= BL soln -> overlay it with a second alpha
# Blasius Soln
blasius <- data.frame(
eta = seq(0, 8, by = 0.5),
uU = c(0.000, 0.1659, 0.3298, 0.4868, 0.6298, 0.7513, 0.8461, 0.9131, 0.9555,
0.9795, 0.9916, 0.9969, 0.9990, 0.9997, 0.9999, 1.000, 1.000))
lvec <- lvec %>%
mutate(eta = sqrt(Re * (x - a)) * dist/(x - a))
vptheory <- as.data.frame(spline(x = blasius$eta, y = blasius$uU, xout = lvec$eta))
vptheory <- data.frame(lvec, UUmblasius = vptheory$y) %>%
mutate(UUmblasius = ifelse(eta >= 8, 1, UUmblasius))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/1.5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
vpblvals = BLCalcs(omesh, xvec, AoA, Re)
vpblvals
nrow(vpblvals)
vpbl = filter(vpblvals, method = "max")
vpbl = filter(vpblvals, method == "max")
vpbl
head(velprofile)
asdf =  (1 > 3)
asdf
velprofile %>%
rowwise() %>%
mutate(bl = (dist <= filter(vpbl, xO = xO,  surf = surf)$dist))
?double
velprofile %>%
rowwise() %>%
mutate(bl = (dist <= as.numeric(filter(vpbl, xO = xO,  surf = surf)$dist)))
left_join(velprofile, vpbl, by = c(xO, surf))
left_join(velprofile, vpbl, by = c("xO", "surf"))
vpbl
left_join(velprofile, vpbl, by = c("xO", "surf"))
?left_join
inner_join(vpbl, velprofile)
inner_join(vpbl, velprofile, by = c("xO", "surf"))
vpbl = filter(vpblvals, method == "max") %>%
select(xO, surf, thickness)
inner_join(vpbl, velprofile, by = c("xO", "surf"))
asdf <- inner_join(vpbl, velprofile, by = c("xO", "surf"))
View(asdf)
asdf <- right_join(velprofile, vpbl, by = c("xO", "surf"))
velprofile <- right_join(velprofile, vpbl, by = c("xO", "surf")) %>%
mutate(bl = (dist <= thickness))
velprofile
View(velprofile)
gplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5, alpha = xO))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5, alpha = xO))
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5, alpha = xO)) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5, alpha = bl)) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(
x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep/1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
ggplot(data = velprofile, aes(
x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep/1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
coord_fixed(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
coord_flip()
ggplot(data = velprofile, aes(
x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep/1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
coord_fixed(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7))
coord_flip()
?coord_flip
ggplot(data = velprofile, aes(
x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep/1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
coord_fip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
ggplot(data = velprofile, aes(
x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep/1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
coord_flip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
ggplot(data = velprofile,
aes(x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep / 1.5, alpha = 0.2,
group = interaction(surf, xO))) +
geom_ribbon() +
geom_ribbon(data = filter(velprofile, bl == TRUE)) +
coord_flip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
ggplot(data = velprofile,
aes(x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep / 1.5,
group = interaction(surf, xO)),
alpha = 0.2) +
geom_ribbon() +
geom_ribbon(data = filter(velprofile, bl == TRUE)) +
coord_flip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
ggplot(data = velprofile,
aes(x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep / 1.5,
group = interaction(surf, xO),
alpha = 0.2)) +
geom_ribbon() +
geom_ribbon(data = filter(velprofile, bl == TRUE)) +
coord_flip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
ggplot(data = velprofile,
aes(x = ifelse(surf == "upper", 1, -1) * dist,
ymin = x, ymax = x + UUmdash * sep / 1.5,
group = interaction(surf, xO))) +
geom_ribbon(aes(alpha = "out")) +
geom_ribbon(data = filter(velprofile, bl == TRUE), aes(alpha = "in")) +
coord_flip(xlim = c(-distmax, distmax), ylim = c(-0.6, 0.7)) +
theme(aspect.ratio = (2*distmax)/(0.6 + 0.7))
NormalLvec
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
# Set working directory when run from RStudio
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("//ad.monash.edu/home/User032/awan39/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs")
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
#--- Initialise the cluster ----
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
filename = filelist[1]
#--- Load Packages ----
source("Function Load Packages.R")      # For required packages
#--- Print Progress ----
source("Function pblapply.R")           # For PrintThreadProgress
threadname <- ThreadName()
#--- Load ALL file information  ----
source("Function Load Data.R")          # For fn "Load File"
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); rm(filedata)       # N.B: local so must be passed as fn input
ThreadProgress(threadname, Re, AoA, "File Data Loaded")
#--- Run Airfoil Calculations ----
source("Function Airfoil Profile.R")    # For fn "AirfoilCoord", etc
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
#--- Interpolation on the airfoil----
source("Function Interpolations.R")     # For fn "InterpPoint", etc
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
#--- Interpolation on Normals ----
source("Function Airfoil Normals.R")    # For "AirfoilGrads", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpval <- InterpProj(omesh, lvec, plotsurf = TRUE)
# SAVE INTERPVAL then delete it!
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
#--- Boundary Layer Calculations ----
source("Function Boundary Layers.R")    # For "BLCalcs", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), polyn = 5, cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
blplot = bind_rows(blvals, bltheory)
VelProfileLvec <- function(omesh, sep, AoA = 0,
surf = factor(c("upper", "lower"), levels = c("lower", "upper"))) {
# Domain for plotting
xvec = c(-0.497, seq(a + sep, a + c - sep, by = sep), 0.499)
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
# lvec for interpolation
lvec <- NormalLvec(xvec, NormalSamp(seq(0, distmax, length.out = 50)), AoA, surf)
return(lvec)
}
sep = 0.25
lvec = VelProfileLvec(omesh, sep, AoA)
velprofile = VelProfile(blvals, lvec, omesh, AoA, Re)
velprofile
source("Function Boundary Layers.R")    # For "BLCalcs", etc
sep = 0.25
lvec = VelProfileLvec(omesh, sep, AoA)
system.time(velprofile = VelProfile(blvals, lvec, omesh, AoA, Re))
system.time(VelProfile(blvals, lvec, omesh, AoA, Re))
velprofile = VelProfile(blvals, lvec, omesh, AoA, Re)
vptheory = Blasius(lvec, Re)
velprofile
vptheory
blvals
lvec
AoA
Re
source("Function Boundary Layers.R")    # For "BLCalcs", etc
sep = 0.25
vec = VelProfileLvec(omesh, sep, AoA)
lvec = vec$levc; xvec = vec$xvec; rm(vec)
velprofile = VelProfile(blvals, xvec, lvec, omesh, AoA, Re)
vptheory = Blasius(lvec, Re)
source("Function Boundary Layers.R")    # For "BLCalcs", etc
sep = 0.25
vec = VelProfileLvec(omesh, sep, AoA)
lvec = vec$levc; xvec = vec$xvec; rm(vec)
lvec
vec
vec = VelProfileLvec(omesh, sep, AoA)
vec
VelProfileLvec <- function(omesh, sep, AoA = 0,
surf = factor(c("upper", "lower"), levels = c("lower", "upper"))) {
# Domain for plotting
xvec = c(-0.497, seq(a + sep, a + c - sep, by = sep), 0.499)
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
# lvec for interpolation
lvec <- NormalLvec(xvec, NormalSamp(seq(0, distmax, length.out = 50)), AoA, surf)
return(list(xvec = xvec, lvec = lvec))
}
vec = VelProfileLvec(omesh, sep, AoA)
xvec = vec$xvec; lvec = vec$levc; rm(vec)
xvec
lvec
xvec = vec$xvec; lvec = vec$lvec; rm(vec)
vec = VelProfileLvec(omesh, sep, AoA)
xvec = vec$xvec; lvec = vec$lvec; rm(vec)
lvec
velprofile = VelProfile(blvals, xvec, lvec, omesh, AoA, Re)
vptheory = Blasius(lvec, Re)
velprofile
vptheory
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/1.5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
distmax = max(blvals$dist[blvals$xO == max(blvals$xO)]) * 1.2
ggplot(data = velprofile, aes(group = interaction(surf, xO))) +
# geom_path(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05)) +
# geom_point(aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmdash * 0.05))  +
geom_ribbon(aes(x = ifelse(surf == "upper", 1, -1) * dist, ymin = x, ymax = x + UUmdash * sep/1.5), alpha = 0.2) +
geom_path(data = vptheory, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x + UUmblasius * sep/1.5)) +
# geom_path(data = blvals, aes(x = ifelse(surf == "upper", 1, -1) * dist, y = x, group = interaction(method, surf))) +
ylim(-0.6, 0.7) +
xlim(-distmax, distmax) +
coord_flip()
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
