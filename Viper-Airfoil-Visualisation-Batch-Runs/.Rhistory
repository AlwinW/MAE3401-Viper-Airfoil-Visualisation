lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq", "m", "c")]
)
gradint <- AirfoilGrads(xO, surf = surf) # Note in AirfoilGrads it rootfinds for x already
gradint <- gradint %>%
filter(surf == get("surf") & eq == get("eq")) %>%
cbind(xO, ., dist) %>%
mutate(xdist = sign(m) * dist/sqrt(1+m^2) * ifelse(surf=="upper",1,-1)) %>%
mutate(xp = x + xdist,
yp = y + xdist * m)
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq")]
)
gradint[c("xp", "yp")]
AoATransform(distinct(gradint[c("xp", "yp")]), AoA)
debug(AoATransform)
AoATransform(distinct(gradint[c("xp", "yp")]), AoA)
data
data[c(1, 2)]
colnames(data[c(1, 2)]) <- c("x", "y")
data
class(data)
colnames(data) <- c("x", "y")
data
colnames(data[c(1,2)]) <- c("x1", "y1")
data
names(data[c(1,2)]) <- c("x1", "y1")
data
AoATransform <- function(odata, AoA) {
# Store the input data and column names
ocolnames <- colnames(odata)
data <- odata[c(1,2)]
colnames(data) <- c("x", "y")
# Apply the transformation
data <- data %>%
mutate(
r = sqrt(x^2 + y^2),
theta = atan(y/x),
theta = ifelse(is.na(theta),0,theta),
theta = ifelse(x < 0, theta + pi, theta),
theta = theta - AoA*pi/180,
x = r*cos(theta),
y = r*sin(theta)
) %>%
select(x, y)
# Re-combine the new data with the old data and restore colnames
odata[c(1,2)] = data
colnames(odata) <- ocolnames
return(odata)
}
AoATransform(distinct(gradint[c("xp", "yp")]), AoA)
gradint
AoATransform(distinct(gradint[c("xp", "yp")]), 10)
AoATransform(distinct(gradint[c("xp", "yp")]), 10*pi/180)
AoATransform(distinct(gradint[c("x", "y")]), AoA)
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq")]
)
lvec
class(lvec)
lvec <- lvec %>%
mutate(delx = xp - x, dely = yp - y,
len = sqrt(delx^2 + dely^2))
lvec
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), pi/18),
AoATransform(distinct(gradint[c("x", "y")]), pi/18),
gradint[c("xO", "dist", "surf", "eq")]
) %>%
mutate(delx = xp - x, dely = yp - y, len = sqrt(delx^2 + dely^2))
lvec
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), pi/8),
AoATransform(distinct(gradint[c("x", "y")]), pi/8),
gradint[c("xO", "dist", "surf", "eq")]
) %>%
mutate(delx = xp - x, dely = yp - y, len = sqrt(delx^2 + dely^2))
lvec
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq")]
) %>%
mutate(delx = xp - x, dely = yp - y)
?interpp
?interpp
LoadPackages()
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Install Packages.R', echo=TRUE)
LoadPackages()
packages <- c(
"parallel",
"gridExtra",
"tidyr",
"dplyr",
"purrr",
"pbapply",
"ggplot2",
"RColorBrewer",
"akima"
)
LoadPackages()
varnames = c("U", "V", "P", "vort_xy_plane")
?root
omesh[[U]]
omesh[U]
omesh[["U"]]
lvec[1]
lvec[[1]]
lvec
lapply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
linear = TRUE
extrap = FALSE
lapply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
apply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
apply(
varnames,
fun = function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
apply(
varnames,
FUN = function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
mapply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
?mapply
apply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
lmesh <- lapply(
varnames,
function(var) interpp(
x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear, extrap = extrap))
?interpp
unlist(lmesh)
lmesh <- lvec
for (var in varnames) {
lmeshv <- suppressWarnings(
as.data.frame(interpp(x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec$x, yo = lvec$y,
linear = linear,
extrap = extrap)))
lmesh <- cbind(lmesh, lmeshv[3])
}
# Give the columns meaningful names
colnames(lmesh) <- c(colnames(lvec), varnames)
lmesh
AirfoilGradNACA <- function(xO, surf, del) {
# Determine the value of x for xO on the airfoil and neighbours
x = Airfoilx(xO, surf = surf)
x = c(x-del, x, x + del)
# Determine the values
surfval = AirfoilCurve(x, out = surf)
# Estimate the gradients
surfval <- mutate(surfval,
dydx = (y - lag(y, 1)) / (x - lag(x, 1)),
dydxave = (dydx + lag(dydx, 1)) / 2)
dydx = surfval$dydxave[3]
# Determine normal and tagential equations for output
out <- list(out = data.frame(
surf = surf,
eq = c("tan", "norm"),
# x = surfval$x[2],
x = xO,
y = surfval$y[2],
m = c(dydx, -1/dydx)) %>%
mutate(c = -m*x + y)
)
return(out)
}
NormalPoint <- function(xO, dist, AoA = 0, surf = "upper", eq = "norm") {
# Find the gradient at the xO point
gradint <- AirfoilGrads(xO, surf = surf) # Note in AirfoilGrads it rootfinds for x already
# Determine the location of (xp, yp) for a given distance
gradint <- gradint %>%
filter(surf == get("surf") & eq == get("eq")) %>%
cbind(xO, ., dist) %>%
mutate(xdist = sign(m) * dist/sqrt(1+m^2) * ifelse(surf=="upper",1,-1)) %>%
mutate(xp = x + xdist,
yp = y + xdist * m)
# Transform the (xp, yp) and (x, y) coordinates and find the vector normal to the surface
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq")]
) %>%
mutate(delx = xp - x, dely = yp - y)
return(lvec)
}
gradint <- AirfoilGrads(xO, surf = surf) # Note in AirfoilGrads it rootfinds for x already
# Determine the location of (xp, yp) for a given distance
gradint <- gradint %>%
filter(surf == get("surf") & eq == get("eq")) %>%
cbind(xO, ., dist) %>%
mutate(xdist = sign(m) * dist/sqrt(1+m^2) * ifelse(surf=="upper",1,-1)) %>%
mutate(xp = x + xdist,
yp = y + xdist * m)
# Transform the (xp, yp) and (x, y) coordinates and find the vector normal to the surface
lvec <- cbind(
AoATransform(distinct(gradint[c("xp", "yp")]), AoA),
AoATransform(distinct(gradint[c("x", "y")]), AoA),
gradint[c("xO", "dist", "surf", "eq")]
) %>%
mutate(delx = xp - x, dely = yp - y)
lvec
x = Airfoilx(xO, surf = surf)
x
xO
x = c(x-del, x, x + del)
lmesh <- InterpPoint(omesh, lvec, varnames, linear, extrap)
InterpPoint <- function(omesh, lvec, varnames = c("U", "V", "P", "vort_xy_plane"),
linear = TRUE, extrap = FALSE) {
# Loop through each variable to interpolate
lmesh <- lvec
for (var in varnames) {
lmeshv <- suppressWarnings(
as.data.frame(interpp(x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec$x, yo = lvec$y,
linear = linear,
extrap = extrap)))
lmesh <- cbind(lmesh, lmeshv[3])
}
# Give the columns meaningful names
colnames(lmesh) <- c(colnames(lvec), varnames)
return(lmesh)
}
lmesh <- InterpPoint(omesh, lvec, varnames, linear, extrap)
lmesh
InterpPoint <- function(omesh, lvec, varnames = c("U", "V", "P", "vort_xy_plane"),
linear = TRUE, extrap = FALSE) {
# Loop through each variable to interpolate
lmesh <- lvec
for (var in varnames) {
lmeshv <- suppressWarnings(
as.data.frame(interpp(x = omesh$x, y = omesh$y, z = omesh[[var]],
xo = lvec[[1]], yo = lvec[[2]],
linear = linear,
extrap = extrap)))
lmesh <- cbind(lmesh, lmeshv[3])
}
# Give the columns meaningful names
colnames(lmesh) <- c(colnames(lvec), varnames)
return(lmesh)
}
lmesh <- InterpPoint(omesh, lvec, varnames, linear, extrap)
lmesh
lmesh %>%
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Airfoil Normals.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Interpolations.R', echo=TRUE)
head(airfoilcoord)
coord <-  AirfoilCurve(xvec, out = "coord") %>%
rename(xO = x) %>%
gather(key, value, -xO) %>%
mutate(coord = substr(key,1,1), surf = substr(key, 2,2)) %>%
select(-key) %>%
spread(coord, value) %>%
mutate(surf = factor(surf, levels = c("U", "L")))
xvec = abs(a) * sin(seq(xmin, xmax, length.out = res)*pi/c)
xmin = a
xmax = c + a
res = 100
xvec = abs(a) * sin(seq(xmin, xmax, length.out = res)*pi/c)
coord <-  AirfoilCurve(xvec, out = "coord") %>%
rename(xO = x) %>%
gather(key, value, -xO) %>%
mutate(coord = substr(key,1,1), surf = substr(key, 2,2)) %>%
select(-key) %>%
spread(coord, value) %>%
mutate(surf = factor(surf, levels = c("U", "L")))
coord
arrange(coord, -surf)
arrange(coord, surf)
AirfoilCurve(xvec, out = "coord") %>%
rename(xO = x) %>%
gather(key, value, -xO) %>%
mutate(coord = substr(key,1,1), surf = substr(key, 2,2)) %>%
select(-key) %>%
spread(coord, value) %>%
mutate(surf = factor(surf, levels = c("L", "U")))
arrange(coord, surf, xO * ifelse(surf == "U", 1, -1))
AirfoilCurve(xvec, out = "coord") %>%
rename(xO = x) %>%
gather(key, value, -xO) %>%
mutate(coord = substr(key,1,1), surf = substr(key, 2,2)) %>%
select(-key) %>%
spread(coord, value) %>%
mutate(surf = factor(surf, levels = c("L", "U"))) %>%
arrange(surf, xO * ifelse(surf == "U", 1, -1))
InterpPoint
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
airfoilmesh
ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path()
ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(aes(size = 1.2)) +
geom_point() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
source("Function Install Packages.R")
source("Plot Settings.R")
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolation.R")
source("Function Interpolations.R")
max(omesh$x)
min(omesh$x)
xvec = AirfoilSamp(seq(a, a+c, by = 0.15), cylinder = TRUE)
dist = NormalSamp(seq(0, 10, length.out = 10))
xvec
dist
dist = NormalSamp(seq(0, 10, length.out = 7))
dist
dist = NormalSamp(seq(0, 10, length.out = 5))
dist
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
interp <- InterpPerpLine(omesh, x, AoA = AoA, surf = surf)
return(interp)
})
InterpProj
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec, AoA, surf = "upper")
return(interp)
})
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec, AoA)
return(interp)
})
x = xvec[1]
lvec = NormalPoint(x, dist, surf = "upper")
lvec
interp <- InterpProj(omesh, lvec, AoA)
interp <- InterpProj(omesh, lvec)
interp
InterpProj <- function(omesh, lvec, varnames = c("U", "V", "P", "vort_xy_plane"),
linear = TRUE, extrap = FALSE) {
# Interpolate  to find the varibles
lmesh <- InterpPoint(omesh, lvec, varnames, linear, extrap)
# Use vector projection parallel to the normal
lmesh <- lmesh %>%
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist) %>%
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0))
}
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpval
lapply(interpval, rbind)
rbind.fill(interpval)
rbind(interpval)
do.call("rbind", interpval)
bind_rows(interpval)
system.time(interpval <- do.call("rbind", interpval))
system.time(interpval <- do.call("rbind", interpval))
interpval <- do.call("rbind", interpval)
ggplot () +
geom_point(data = interpval, aes(x = x, y = y, colour = Udash)) +
geom_point(data = filter(interpval, Udash < -1.2), aes(x = x, y = y, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpval, Udash > 1.2), aes(x = x, y = y, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
ggplot () +
geom_point(data = interpval, aes(x = x, y = y, colour = Udash)) +
geom_point(data = filter(interpval, Udash < -1.2), aes(x = x, y = y, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpval, Udash > 1.2), aes(x = x, y = y, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
interpval
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpvalLong <- do.call("rbind", interpval)
ggplot () +
geom_point(data = interpvalLong, aes(x = x, y = y, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = x, y = y, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = x, y = y, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
ggplot () +
geom_point(data = interpvalLong, aes(x = x, y = y, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = x, y = y, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = x, y = y, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
# xlim(-1.2, 0.8) +
# ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
interpvalLong
ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
# xlim(-1.2, 0.8) +
# ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
#--- Interpolation on Normals
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
dist = NormalSamp(seq(0, 1, by = 0.1))
interpval <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpvalLong <- bind_rows(interpval)
ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
?lappy
?lapply
#--- Interpolation on Normals
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.1))
interpvalU <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpvalL <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, surf = "lower")
interp <- InterpProj(omesh, lvec)
return(interp)
})
interpvalLong <- bind_rows(c(interpvalU, interpvalL))
interpvalLong
ggplot () +
geom_point(data = interpvalLong, aes(x = xp, y = yp, colour = Udash)) +
geom_point(data = filter(interpvalLong, Udash < -1.2), aes(x = xp, y = yp, colour = Udash), colour = "#BE2828") +
geom_point(data = filter(interpvalLong, Udash > 1.2), aes(x = xp, y = yp, colour = Udash), colour = "#3C4BA0") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_colour_gradientn("U'", colours = brewer.pal(11, "RdYlBu"), limits = c(-1.2, 1.2)) +
coord_fixed()
