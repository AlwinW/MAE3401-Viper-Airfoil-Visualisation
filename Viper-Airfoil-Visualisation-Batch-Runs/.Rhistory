mutate(which.max(dist))
interpval <- InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE) %>%
select(xO, dist, surf, Udash, Vdash, UUmdash)
#--- Determine the distances ----
blthickness <- blthickness %>%
mutate(blU = 0.99 * Udash) %>%
mutate(thickness = interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method) %>%
mutate(which.max(dist)))
blthickness
blthickness <- blthickness %>%
mutate(blU = 0.99 * Udash) %>%
rowwise() %>%
mutate(thickness = interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash) %>%
mutate(which.max(dist)))
blthickness %>%
mutate(blU = 0.99 * Udash) %>%
rowwise() %>%
do.call(thickness = interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash) %>%
mutate(which.max(dist)))
blthickness %>%
mutate(blU = 0.99 * Udash) %>%
rowwise() %>%
do.call(., thickness = interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash) %>%
mutate(which.max(dist)))
blthickness %>%
mutate(blU = 0.99 * Udash) %>%
rowwise() %>%
do(., thickness = interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash) %>%
mutate(which.max(dist)))
interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash) %>%
mutate(which.max(dist))
interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, method == method, dist < dist, Udash < Udash)
interpval
interpvalsel %>%
ungroup() %>%
filter(xO == xO, surf == surf, dist < dist, Udash < Udash) %>%
mutate(which.max(dist))
interpval %>%
ungroup() %>%
filter(xO == xO, surf == surf, dist < dist, Udash < blU) %>%
mutate(which.max(dist))
blthickness
interpval <- InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE) %>%
select(xO, dist, surf, Udash, Vdash, UUmdash)
for (i in 1:length(blthickness)) {
interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU)
}
for (i in 1:length(blthickness)) {
potentialsoln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU)
print(potentialsoln)
}
for (i in 1:length(blthickness)) {
potentialsoln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU) %>%
slice(which.max(dist))
print(potentialsoln)
}
?do.call
blthickness %>%
ungroup() %>%
rowwise() %>%
do.call(function(blthickness){
row <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU) %>%
slice(which.max(dist))
cbind(., row)
})
blthickness %>%
ungroup() %>%
rowwise() %>%
do.call(function(blthickness){
row <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU) %>%
slice(which.max(dist))
cbind(., row)
}, .)
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(., interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blU) %>%
slice(which.max(dist))))
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(., interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blthickness$Udash * 0.99) %>%
slice(which.max(dist))))
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blthickness$Udash * 0.99) %>%
slice(which.max(dist))))
blthickness
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist))),
method = .$method)
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist))),
.$method)
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist)),
.$method))
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist)),
method = .$method))
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist))))
blthickness %>%
ungroup() %>%
rowwise() %>%
do(data.frame(.,interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist))))
blthickness %>%
ungroup() %>%
# rowwise() %>%
do(data.frame(.,interpval %>%
ungroup() %>%
filter(xO == .$xO,
surf == .$surf,
dist <= .$dist,
Udash < .$Udash * 0.99) %>%
slice(which.max(dist))))
lapply(as.list(blthickness),
function(blthickness){
potentialsoln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blthickness$Udash * 0.99) %>%
slice(which.max(dist))
return(potentialsoln)
})
#--- Determine the distances ----
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO,
surf == blthickness$surf,
dist <= blthickness$dist,
Udash < blthickness$Udash * 0.99) %>%
slice(which.max(dist))
blvalues <- rbind(cbind(soln, blthickness$method))
}
blvalues
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
blvalues <- rbind(cbind(soln, method = blthickness$method))
}
blvalues
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
thickness/length.out
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
thickness/length.out
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
}
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
ungroup() %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
thickness/length.out
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
}
interpval$xO[2] - interpval$xO[1]
interpval$dist[2] - interpval$dist[1]
interpval$dist[10] - interpval$dist[1]
interpval$dist[2]
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
ungroup() %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[length.out,]) *
interpval$dist[2]
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
}
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
ungroup() %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[nrow(integrand),]) *
interpval$dist[2]
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
}
blvalues
integrand <- interpval %>%
ungroup() %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
integrand
apply(integrand, 2, sum)
lvec$dist[2]
head(lvec)
#--- Determine the distances ----
blvalues = data.frame()
for (i in 1:length(blthickness)) {
soln <- interpval %>%
ungroup() %>%
filter(xO == blthickness$xO[i],
surf == blthickness$surf[i],
dist <= blthickness$dist[i],
Udash < blthickness$Udash[i] * 0.99) %>%
slice(which.max(dist))
integrand <- interpval %>%
ungroup() %>%
filter(dist <= soln$dist) %>%
mutate(dispthick = 1 - Udash/blU,
momethick = Udash/blU * (1 - Udash / blU),
kinethick = Udash/blU * (1 - (Udash / blU)^2)) %>%
select(dist, dispthick, momethick, kinethick)
distances <- (
apply(integrand, 2, sum) -
1/2 * integrand[1,] -
1/2 * integrand[nrow(integrand),]) *
soln$dist/nrow(integrand)
blvalues <- rbind(cbind(soln, distances, method = blthickness$method))
}
blvalues
source('~/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
#--- Initialise the cluster ----
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
filename = filelist[1]
#--- Load Packages ----
source("Function Load Packages.R")      # For required packages
#--- Print Progress ----
source("Function pblapply.R")           # For PrintThreadProgress
threadname <- ThreadName()
#--- Load ALL file information  ----
source("Function Load Data.R")          # For fn "Load File"
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); rm(filedata)       # N.B: local so must be passed as fn input
ThreadProgress(threadname, Re, AoA, "File Data Loaded")
#--- Run Airfoil Calculations ----
source("Function Airfoil Profile.R")    # For fn "AirfoilCoord", etc
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
#--- Interpolation on the airfoil----
source("Function Interpolations.R")     # For fn "InterpPoint", etc
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
#--- Interpolation on Normals ----
source("Function Airfoil Normals.R")    # For "AirfoilGrads", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for
lvec <- rbind(
bind_rows(pblapply(xvec, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(pblapply(xvec, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
interpval <- InterpProj(omesh, lvec, plotsurf = TRUE)
# SAVE INTERPVAL then delete it!
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
#--- Boundary Layer Calculations ----
source("Function Boundary Layers.R")
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = FALSE)
bl <- pblapply(xvec,
function (x) {
# NOTE: Combine into BL Calc Laterz
# Search along all normals to get 100% thickness
dist = NormalSamp(seq(0, 18, length.out = 1e6))
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blthickness = BLThickness(omesh, lvec)
# Determine BL values
dist = seq(0, max(blthickness$dist), length.out = 1e6)
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blvalues = BLValues(omesh, lvec, blthickness)
return(lvec)
}
)
bl <- pblapply(xvec,
function (x) {
# NOTE: Combine into BL Calc Laterz
# Search along all normals to get 100% thickness
dist = NormalSamp(seq(0, 18, length.out = 1e6))
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blthickness = BLThickness(omesh, lvec)
# Determine BL values
dist = seq(0, max(blthickness$dist), length.out = 1e6)
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blvalues = BLValues(omesh, lvec, blthickness)
return(blvalues)
}
)
debug(BLValues)
bl <- pblapply(xvec,
function (x) {
# NOTE: Combine into BL Calc Laterz
# Search along all normals to get 100% thickness
dist = NormalSamp(seq(0, 18, length.out = 1e6))
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blthickness = BLThickness(omesh, lvec)
# Determine BL values
dist = seq(0, max(blthickness$dist), length.out = 1e6)
lvec <- rbind(
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "upper")),
bind_rows(lapply(x, NormalPoint, dist = dist, AoA = AoA, surf = "lower")))
blvalues = BLValues(omesh, lvec, blthickness)
return(blvalues)
}
)
