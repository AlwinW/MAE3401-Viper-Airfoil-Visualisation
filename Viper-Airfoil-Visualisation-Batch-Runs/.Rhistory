stopCluster(parallelCluster)
dummythread <- function(Re, AoA) {
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
out = Re + AoA + NACA
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
a1 <- pblapply(
folderdata,
function(filedata) {
# This function would go in another source file!
with(filedata, dummythread(Re, AoA))
},
cl = parallelCluster
)
stopCluster(parallelCluster)
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
B = 10000
parallelCluster <- makeCluster(parallel::detectCores())
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 200
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 100
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 200
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 100
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 200
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 10000
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 200
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 100000
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 2000
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 1000
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
?splitpb
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
pboptions(nout = 10)
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 2000
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 1000
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
pboptions(nout = 10)
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
pboptions(nout = 100)
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- END
#--- PBAPPLY EXAMPLE
set.seed(1234)
n <- 2000
x <- rnorm(n)
y <- rnorm(n, crossprod(t(model.matrix(~ x)), c(0, 1)), sd = 0.5)
d <- data.frame(y, x)
mod <- lm(y ~ x, d)
ndat <- model.frame(mod)
B <- 5000
bid <- sapply(1:B, function(i) sample(nrow(ndat), nrow(ndat), TRUE))
fun <- function(z) {
if (missing(z))
z <- sample(nrow(ndat), nrow(ndat), TRUE)
coef(lm(mod$call$formula, data=ndat[z,]))
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("fun", "mod", "ndat", "bid"))
system.time(res1cl <- parLapply(cl = parallelCluster, 1:B, function(i) fun(bid[,i])))
pboptions(nout = 10)
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
pboptions(nout = 100)
system.time(res1pbcl <- pblapply(1:B, function(i) fun(bid[,i]), cl = parallelCluster))
stopCluster(parallelCluster)
#--- END
?system.time
rm(bid)
rm(d, ndat)
rm(a1, B, mod, n, res1cl, re1pbcl)
rm(res1pbcl, x, y, fun, dummythread)
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
out = Re + AoA + NACA
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
airfoildata
dummythread <- function(Re, AoA) {
out = Re + AoA + airfoildata$r
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
a1
unlist(airfoildata)
dummythread <- function(Re, AoA) {
out = Re + AoA + with(airfoildata, r)
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(
with(
airfoildata, filedata, dummythread(Re, AoA)))
},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
out = Re + AoA + r
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, with(airfoildata,
dummythread(Re, AoA)
))},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
with(airfoildata,out = Re + AoA + r)
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
out = Re + AoA + with(airfoildata,r)
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
with(airfoildata, out = Re + AoA + r)
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
# out = Re + AoA + with(airfoildata,r)
list2env(airfoildata)
out = Re + AoA + r
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
?list2env
# This function would go in another source file!
dummythread <- function(Re, AoA) {
# out = Re + AoA + with(airfoildata,r)
m = airfoildata$m
p = airfoildata$p
t = airfoildata$t
c = airfoildata$c
a = airfoildata$a
r = airfoildata$r
xc = airfoildata$xc
yc = airfoildata$yc
out = Re + AoA + r
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
# This function would go in another source file!
dummythread <- function(Re, AoA) {
# out = Re + AoA + with(airfoildata,r)
# m = airfoildata$m
# p = airfoildata$p
# t = airfoildata$t
# c = airfoildata$c
# a = airfoildata$a
# r = airfoildata$r
# xc = airfoildata$xc
# yc = airfoildata$yc
list2env(airfoildata, envir = .GlobalEnv)
out = Re + AoA + r
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
This function would go in another source file!
dummythread <- function(Re, AoA) {
list2env(airfoildata, envir = .GlobalEnv)
out = Re + AoA + r*100
return(out)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "dummythread"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, dummythread(Re, AoA))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Airfoil Profile.R', echo=TRUE)
source("Function Install Packages.R")
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
?pbapply
LoadFolder <- function(foldername = "Input_Data") {
# Get a list of the files
filelist <- list.files(path = foldername, pattern = "*.dat")
# Load the data for each file using parallel cores
parallelCluster <- parallel::makeCluster(parallel::detectCores())
folderdata <- pblapply(
filelist, LoadFile, foldername = foldername,
cl = parallelCluster
)
stopCluster(parallelCluster)
# Recombine Re and AoA since the order may have been shifted around
#   during the parallel work
listnames <- unlist(lapply(folderdata, function(x) x$ID
))
# Set the names of folderdata and then reorder them
names(folderdata) <- listnames
folderdata <- folderdata[order(listnames)]
# Return the list
return(folderdata)
}
source("Function Load Data.R")
folderdata <- LoadFolder()
?xlim
?ggtitle
paste0("hi", "bye")
source("Function Load Data.R")
source("Thread Function Calls.R")
source("Thread Function Calls.R")
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source("Thread Function Calls.R")
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source("Thread Function Calls.R")
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source("Thread Function Calls.R")
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
ThreadAll <- function(ID, Re, AoA, filepath, omesh, airfoildata) {
#--- Required files
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
#--- Manipulate input data
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
#--- Airfoil profile and plot
# Airfoil coordinates
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
}
parallelCluster <- makeCluster(parallel::detectCores())
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
