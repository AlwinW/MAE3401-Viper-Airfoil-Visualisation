#--- Run Airfoil Calculations ----
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
# Plots
plot_airfoil_P =
PlotAirfoil(omesh, airfoilcoord, "P", "x", "y", -0.2, 0.2, Re, AoA, "Pressure", rev = TRUE)
plot_airfoil_vort =
PlotAirfoil(omesh, airfoilcoord, "vort_xy_plane", "x", "y", -20, 20, Re, AoA, "Vorticity", rev = TRUE)
PlotSave(plot_airfoil_P, saveplot, ID, width = 5, height = 4)
PlotSave(plot_airfoil_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Values Plotted")
# >> Save Done ----
ObjSave(airfoilcoord, omesh, plot_airfoil_P, plot_airfoil_vort,
path = savedata, ID = ID)
# # rm(plot_airfoil_P, plot_airfoil_vort)
#--- Interpolation on the airfoil----
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
airfoilsurfmesh$surf = factor(airfoilsurfmesh$surf, levels = c("U", "L"),  labels = c("Upper", "Lower"))
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
# Coeffients of pressure and vorticity
plot_cp = ggplot(airfoilsurfmesh, aes(x = x, y = P * 2, linetype = surf)) +
geom_path() +
scale_y_reverse() +
scale_linetype_manual("Surface",
values = c("twodash", "solid"), labels = c(Upper = "Upper", Lower = "Lower")) +
labs(title = paste("Re Number", Re, "AoA", paste(AoA, "deg:", sep = ""), "Coefficient of Pressure"),
y = expression(C[p]), x = "x (Airfoil Chord)")
plot_vort = ggplot(airfoilsurfmesh, aes(x = x, y = vort_xy_plane, linetype = surf)) +
geom_path() +
scale_y_reverse() +
# scale_y_log10() + # Make it a log scale laters
scale_linetype_manual("Surface",
values = c("twodash", "solid"), labels = c(Upper = "Upper", Lower = "Lower")) +
labs(title = paste("Re Number", Re, "AoA", paste(AoA, "deg:", sep = ""), "Vorticity"),
y = "Vorticity in the x-y Plane", x = "x (Airfoil Chord)")
PlotSave(plot_cp, saveplot, ID, width = 5, height = 4)
PlotSave(plot_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Cp and Vort Plotted")
# >> Save Done ----
ObjSave(airfoilsurfmesh, plot_cp, plot_vort,
path = savedata, ID = ID)
# # rm(airfoilsurfmesh, plot_cp, plot_vort)
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
# Plots
plot_Norm_Udash =
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
plot_Norm_Vdash =
PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.8, 0.8, Re, AoA, "V'")
plot_Norm_UUmdash =
PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
plot_Norm_VVmdash =
PlotAirfoil(interpnorms, airfoilcoord, "VVmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "V'/Vm'")
plot_Norm_P =
PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.2, 0.2, Re, AoA, "Pressure")
plot_Norm_vort =
PlotAirfoil(interpnorms, airfoilcoord, "vort_xy_plane", "xp", "yp", -20, 20, Re, AoA, "Vorticity")
PlotSave(plot_Norm_Udash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_Vdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_UUmdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_VVmdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_P, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Plotted")
# >> Save Done ----
ObjSave(interpnorms, plot_Norm_Udash, plot_Norm_Vdash, plot_Norm_UUmdash, plot_Norm_VVmdash, plot_Norm_P, plot_Norm_vort,
path = savedata, ID = ID)
#--- Load All the functions -----
source("Script All Functions.R")
#--- Load the Data in the Folder ----
# If using multiple computers set move = TRUE
temp = LoadFolder(foldername = "Input_Data", move = FALSE)
list2env(temp, envir = environment()); rm(temp)
#--- Load the AIrfoil Data ----
# Load the Airfoil
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
#--- Location for Saving ----
saveplot = "Output_Plot"
savedata = "Output_Data"
if (!file.info(saveplot)$isdir) dir.create(saveplot, recursive = TRUE)
if (!file.info(savedata)$isdir) dir.create(savedata, recursive = TRUE)
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt")
#--- Thread Function ----
source("Script Threads.R")
filename = filelist[2]
source("Script All Functions.R")
source("Script Plots.R")
threadname <- ThreadName()
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); # rm(filedata)       # N.B: local so must be passed as fn input
# >> File Data Loaded ----
ThreadProgress(threadname, Re, AoA, "File Data Loaded
---------------------------------------------------------------")
#--- Run Airfoil Calculations ----
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
# Plots
plot_airfoil_P =
PlotAirfoil(omesh, airfoilcoord, "P", "x", "y", -0.2, 0.2, Re, AoA, "Pressure", rev = TRUE)
plot_airfoil_vort =
PlotAirfoil(omesh, airfoilcoord, "vort_xy_plane", "x", "y", -20, 20, Re, AoA, "Vorticity", rev = TRUE)
PlotSave(plot_airfoil_P, saveplot, ID, width = 5, height = 4)
PlotSave(plot_airfoil_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Values Plotted")
# >> Save Done ----
ObjSave(airfoilcoord, omesh, plot_airfoil_P, plot_airfoil_vort,
path = savedata, ID = ID)
# # rm(plot_airfoil_P, plot_airfoil_vort)
#--- Interpolation on the airfoil----
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
airfoilsurfmesh$surf = factor(airfoilsurfmesh$surf, levels = c("U", "L"),  labels = c("Upper", "Lower"))
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
# Coeffients of pressure and vorticity
plot_cp = ggplot(airfoilsurfmesh, aes(x = x, y = P * 2, linetype = surf)) +
geom_path() +
scale_y_reverse() +
scale_linetype_manual("Surface",
values = c("twodash", "solid"), labels = c(Upper = "Upper", Lower = "Lower")) +
labs(title = paste("Re Number", Re, "AoA", paste(AoA, "deg:", sep = ""), "Coefficient of Pressure"),
y = expression(C[p]), x = "x (Airfoil Chord)")
plot_vort = ggplot(airfoilsurfmesh, aes(x = x, y = vort_xy_plane, linetype = surf)) +
geom_path() +
scale_y_reverse() +
# scale_y_log10() + # Make it a log scale laters
scale_linetype_manual("Surface",
values = c("twodash", "solid"), labels = c(Upper = "Upper", Lower = "Lower")) +
labs(title = paste("Re Number", Re, "AoA", paste(AoA, "deg:", sep = ""), "Vorticity"),
y = "Vorticity in the x-y Plane", x = "x (Airfoil Chord)")
PlotSave(plot_cp, saveplot, ID, width = 5, height = 4)
PlotSave(plot_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Airfoil Cp and Vort Plotted")
# >> Save Done ----
ObjSave(airfoilsurfmesh, plot_cp, plot_vort,
path = savedata, ID = ID)
# # rm(airfoilsurfmesh, plot_cp, plot_vort)
#--- Interpolation on Normals ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA)
interpnorms <- InterpProj(omesh, lvec, plotsurf = TRUE)
# >> Calcs Done ----
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
# Plots
plot_Norm_Udash =
PlotAirfoil(interpnorms, airfoilcoord, "Udash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'")
plot_Norm_Vdash =
PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.8, 0.8, Re, AoA, "V'")
plot_Norm_UUmdash =
PlotAirfoil(interpnorms, airfoilcoord, "UUmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "U'/Um'")
plot_Norm_VVmdash =
PlotAirfoil(interpnorms, airfoilcoord, "VVmdash", "xp", "yp", -1.2, 1.2, Re, AoA, "V'/Vm'")
plot_Norm_P =
PlotAirfoil(interpnorms, airfoilcoord, "Vdash", "xp", "yp", -0.2, 0.2, Re, AoA, "Pressure")
plot_Norm_vort =
PlotAirfoil(interpnorms, airfoilcoord, "vort_xy_plane", "xp", "yp", -20, 20, Re, AoA, "Vorticity")
PlotSave(plot_Norm_Udash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_Vdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_UUmdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_VVmdash, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_P, saveplot, ID, width = 5, height = 4)
PlotSave(plot_Norm_vort, saveplot, ID, width = 5, height = 4)
# >> Plots Done ----
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Plotted")
# >> Save Done ----
ObjSave(interpnorms, plot_Norm_Udash, plot_Norm_Vdash, plot_Norm_UUmdash, plot_Norm_VVmdash, plot_Norm_P, plot_Norm_vort,
path = savedata, ID = ID)
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), polyn = 5, cylinder = TRUE)
h1 = 0.01
dist1 = NormalSamp(seq(0, 18, by = h1))
lvec <- NormalLvec(xvec, dist1, AoA, c("upper", "lower"))
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
varnames = c("U", "V")
methodlevels = c("theory", "max", "tp", "UUm", "mag")
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
outcols = c("xO", "dist", "surf", "Udash", "Vdash", "UUmdash")
numericalmethod <- interpval[abs(Udash) >  1e-3, outcols, with = FALSE] %>%
# Turning Point
.[,tp.lag1 := lead(Udash,1) - Udash, by = c("surf", "xO")] %>%
.[,tp.sign1 := sign(tp.lag1 * lag(tp.lag1)), by = c("surf", "xO")] %>%
.[,tp.lag2 := tp.lag1 - lag(tp.lag1, 1), by = c("surf", "xO")] %>%
# UUm
.[,uum.diff := 1 - UUmdash, by = c("surf", "xO")] %>%
.[,uum.sign := sign(lead(uum.diff,1) * uum.diff), by = c("surf", "xO")] %>%
# Magintude of vel
.[,mag.vel := 1 - sqrt(Udash^2 + Vdash^2), by = c("surf", "xO")] %>%
.[,mag.sign := sign(lead(mag.vel,1) * mag.vel), by = c("surf", "xO")]
blthickmax <- numericalmethod[, outcols, with = FALSE] %>%
.[, .SD[which.max(Udash)], by = c("surf", "xO")] %>%
.[, method := "max"]
blthicktp <- numericalmethod[tp.sign1 == -1 & tp.lag2 < 0, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "tp"]
blthickuum <- numericalmethod[uum.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "UUm"]
blthickmag <- numericalmethod[mag.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "mag"]
rm(numericalmethod)
blthickness = rbind(blthickmax, blthicktp, blthickuum, blthickmag) %>%
.[, method := factor(method, levels = methodlevels)]
blthickness[]
BLThickness <- function(omesh, lvec, varnames = c("U", "V"),
methodlevels = c("theory", "max", "tp", "UUm", "mag")) {
# Interpolate
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
# Manipulate data.table
outcols = c("xO", "dist", "surf", "Udash", "Vdash", "UUmdash")
numericalmethod <- interpval[abs(Udash) >  1e-3, outcols, with = FALSE] %>%
# Turning Point
.[,tp.lag1 := lead(Udash,1) - Udash, by = c("surf", "xO")] %>%
.[,tp.sign1 := sign(tp.lag1 * lag(tp.lag1)), by = c("surf", "xO")] %>%
.[,tp.lag2 := tp.lag1 - lag(tp.lag1, 1), by = c("surf", "xO")] %>%
# UUm
.[,uum.diff := 1 - UUmdash, by = c("surf", "xO")] %>%
.[,uum.sign := sign(lead(uum.diff,1) * uum.diff), by = c("surf", "xO")] %>%
# Magintude of vel
.[,mag.vel := 1 - sqrt(Udash^2 + Vdash^2), by = c("surf", "xO")] %>%
.[,mag.sign := sign(lead(mag.vel,1) * mag.vel), by = c("surf", "xO")]
blthickmax <- numericalmethod[, outcols, with = FALSE] %>%
.[, .SD[which.max(Udash)], by = c("surf", "xO")] %>%
.[, method := "max"]
blthicktp <- numericalmethod[tp.sign1 == -1 & tp.lag2 < 0, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "tp"]
blthickuum <- numericalmethod[uum.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "UUm"]
blthickmag <- numericalmethod[mag.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "mag"]
rm(numericalmethod)
blthickness = rbind(blthickmax, blthicktp, blthickuum, blthickmag) %>%
.[, method := factor(method, levels = methodlevels)]
return(blthickness)
}
system.time(BLThickness(omesh, lvec))
BLThicknessOLD <- function(omesh, lvec, varnames = c("U", "V"),
methodlevels = c("max", "tp", "UUm", "mag", "theory")) {
# Find the interpolation along the points of lvec
interpval <- InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE) %>%
select(xO, dist, surf, Udash, Vdash, UUmdash)
#--- 100% Boundary Layer Thickness ----
# Manipulate the data to find the boundary layer thickness
interpval <- interpval %>%
# Remove potentially problematic flow at the wall %>%
filter(abs(Udash) > 1e-3) %>%
# Turning Point
mutate(tp.lag1 = lead(Udash, 1) - Udash) %>%
mutate(tp.sign1 = sign(tp.lag1 * lag(tp.lag1)),
tp.lag2 = tp.lag1 - lag(tp.lag1, 1)) %>%
# UUm
mutate(uum.diff = 1 - UUmdash) %>%
mutate(uum.sign = sign(lead(uum.diff,1) * uum.diff)) %>%
# Magintude of vel
mutate(mag.vel = 1 - sqrt(Udash^2 + Vdash^2)) %>%
mutate(mag.sign = sign(lead(mag.vel,1) * mag.vel))
# Using the max thickness
blthickmax <- interpval %>%
select(xO, dist, surf, Udash, UUmdash) %>%
slice(which.max(Udash)) %>%
mutate(method = "max")
# Using the turning point
blthicktp <- interpval %>%
filter(tp.sign1 == -1, tp.lag2 < 0) %>%
select(xO, dist, surf, Udash, UUmdash) %>%
slice(which.min(dist))%>%
mutate(method = "tp")
# Using Uum equal to 1
blthickuum <- interpval %>%
filter(uum.sign == -1) %>%
select(xO, dist, surf, Udash, UUmdash) %>%
slice(which.min(dist))%>%
mutate(method = "UUm")
# Using the magnitude of the velocity
blthickmag <- interpval %>%
filter(mag.sign == -1) %>%
select(xO, dist, surf, Udash, UUmdash) %>%
slice(which.min(dist))%>%
mutate(method = "mag")
# Remove the object to conserve RAM
rm(interpval)
# Output of thicknesses (100%)
blthickness = rbind(blthickmax, blthicktp, blthickuum, blthickmag) %>%
mutate(method = factor(method, levels = methodlevels)) %>%
group_by(method, add = TRUE) %>%
arrange(surf, xO, method)
return(blthickness)
}
system.time(BLThickness(omesh, lvec))
system.time(BLThicknessOLD(omesh, lvec))
system.time(BLThickness(omesh, lvec))
system.time(BLThicknessOLD(omesh, lvec))
system.time(BLThickness(omesh, lvec))
system.time(BLThickness(omesh, lvec))
gc()
system.time(BLThicknessOLD(omesh, lvec))
gc()
system.time(BLThickness(omesh, lvec))
BLThickness(omesh, lvec)
test 1 = BLThickness(omesh, lvec)
test1 = BLThickness(omesh, lvec)
test2 = BLThickness(omesh, lvec)
test2 = BLThicknessOLD(omesh, lvec)
test1[]
(test2)
?setorder
BLThickness <- function(omesh, lvec, varnames = c("U", "V"),
methodlevels = c("theory", "max", "tp", "UUm", "mag")) {
# Interpolate
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
# Manipulate data.table
outcols = c("xO", "dist", "surf", "Udash", "Vdash", "UUmdash")
numericalmethod <- interpval[abs(Udash) >  1e-3, outcols, with = FALSE] %>%
# Order the data
setorder(., surf, xO) %>%
# Turning Point
.[,tp.lag1 := lead(Udash,1) - Udash, by = c("surf", "xO")] %>%
.[,tp.sign1 := sign(tp.lag1 * lag(tp.lag1)), by = c("surf", "xO")] %>%
.[,tp.lag2 := tp.lag1 - lag(tp.lag1, 1), by = c("surf", "xO")] %>%
# UUm
.[,uum.diff := 1 - UUmdash, by = c("surf", "xO")] %>%
.[,uum.sign := sign(lead(uum.diff,1) * uum.diff), by = c("surf", "xO")] %>%
# Magintude of vel
.[,mag.vel := 1 - sqrt(Udash^2 + Vdash^2), by = c("surf", "xO")] %>%
.[,mag.sign := sign(lead(mag.vel,1) * mag.vel), by = c("surf", "xO")]
blthickmax <- numericalmethod[, outcols, with = FALSE] %>%
.[, .SD[which.max(Udash)], by = c("surf", "xO")] %>%
.[, method := "max"]
blthicktp <- numericalmethod[tp.sign1 == -1 & tp.lag2 < 0, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "tp"]
blthickuum <- numericalmethod[uum.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "UUm"]
blthickmag <- numericalmethod[mag.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "mag"]
rm(numericalmethod)
blthickness = rbind(blthickmax, blthicktp, blthickuum, blthickmag) %>%
.[, method := factor(method, levels = methodlevels)] %>%
.[]
return(blthickness)
}
test1 = BLThickness(omesh, lvec)
test1[]
(test2)
BLThickness <- function(omesh, lvec, varnames = c("U", "V"),
methodlevels = c("theory", "max", "tp", "UUm", "mag")) {
# Interpolate
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
# Manipulate data.table
outcols = c("xO", "dist", "surf", "Udash", "Vdash", "UUmdash")
numericalmethod <- interpval[abs(Udash) >  1e-3, outcols, with = FALSE] %>%
# Order the data
# setorder(., surf, xO) %>%
# Turning Point
.[,tp.lag1 := lead(Udash,1) - Udash, by = c("surf", "xO")] %>%
.[,tp.sign1 := sign(tp.lag1 * lag(tp.lag1)), by = c("surf", "xO")] %>%
.[,tp.lag2 := tp.lag1 - lag(tp.lag1, 1), by = c("surf", "xO")] %>%
# UUm
.[,uum.diff := 1 - UUmdash, by = c("surf", "xO")] %>%
.[,uum.sign := sign(lead(uum.diff,1) * uum.diff), by = c("surf", "xO")] %>%
# Magintude of vel
.[,mag.vel := 1 - sqrt(Udash^2 + Vdash^2), by = c("surf", "xO")] %>%
.[,mag.sign := sign(lead(mag.vel,1) * mag.vel), by = c("surf", "xO")]
blthickmax <- numericalmethod[, outcols, with = FALSE] %>%
.[, .SD[which.max(Udash)], by = c("surf", "xO")] %>%
.[, method := "max"]
blthicktp <- numericalmethod[tp.sign1 == -1 & tp.lag2 < 0, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "tp"]
blthickuum <- numericalmethod[uum.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "UUm"]
blthickmag <- numericalmethod[mag.sign == -1, outcols, with = FALSE] %>%
.[, .SD[which.min(dist)], by = c("surf", "xO")] %>%
.[, method := "mag"]
rm(numericalmethod)
blthickness = rbind(blthickmax, blthicktp, blthickuum, blthickmag) %>%
.[, method := factor(method, levels = methodlevels)] %>%
setorder(., surf, xO)
return(blthickness)
}
test1[]
test1 = BLThickness(omesh, lvec)
test1[]
(test2)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Search along a smaller distance step
h2 = 2e-5
dist2 = seq(min(blthickness$dist) - h1, max(blthickness$dist)  + h1, by = h2)
dom <- as.matrix(sapply(blthickness$dist,
function(dist) dist2 > (dist - h1) & dist2 < (dist + h1)))
dom = apply(dom, 1, sum)
dom = ifelse(dom != 0, TRUE, FALSE)
dist2 = dist2[dom]
lvec <- NormalLvec(xvec, dist2, AoA, c("upper", "lower"))
rm(dist2)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
blthickness
blthickness[]
interpval
interpval = cbind(rep(interpval, times = 4), method = rep(c("max", "tp", "UUm", "mag")))
interpval[]
rep(interpval, times = 4)
interpval = do.call("rbind", replicate(3, interpval, simplify = FALSE))
interpval[]
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
dist = seq(0, max(blthickness$dist), by = h)
h = 1e-4
dist = seq(0, max(blthickness$dist), by = h)
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
interpval = do.call("rbind", replicate(3, interpval, simplify = FALSE))
interpval[]
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
test = do.call("rbind", replicate(3, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), times = nrow(interpval))]
test = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), times = nrow(interpval))]
test]
test[]
test = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), each = nrow(interpval))]
test[]
?setkey
blthickness
test = integrand[blthickness]
nterpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
integrand = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), each = nrow(interpval))]
integrand = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), each = nrow(interpval))]
test
blthickness
integrand[]
thickness = blthickness[, c("surf", "xO", "method", "dist")]
thickness[]
thickness[,hello = dist]
thickness[, "hello" = dist]
thickness[, "hello" == dist]
thickness[, "hello" := dist]
thickness[]
thickness = blthickness[, "thickness" := dist][, c("surf", "xO", "method", "dist")][]
thickness[]
thickness = blthickness[, "thickness" := dist][, c("surf", "xO", "method", "thickness")]
thickness
test = integrand[blthickness, on = c("surf", "xO", "method")]
test[]
integrand = integrand[blthickness, on = c("surf", "xO", "method")]
integrand[]
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
integrand = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), each = nrow(interpval))]
# Reduce the blthickness data.table to be smaller
thickness = blthickness[, "thickness" := dist][, c("surf", "xO", "method", "thickness")]
integrand[]
object.size(integrand)
object.size(integrand)/1024^2
format(object.size(integrand), unit = "mb")
format(object.size(integrand), unit = "Mb")
test = integrand[blthickness, on = c("surf", "xO", "method")] %>%
# Filter only columns in the thickness
.[dist < thickness]
gc()
test[]
thickness = blthickness[, "thickness" := dist][, c("surf", "xO", "method", "thickness")]
thickness[]
testp[]
test[]
rm(interpval, thickness, integrand)
gc()
# Find the interpolation along the points of lvec
interpval <- data.table(InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE))
interpval = do.call("rbind", replicate(4, interpval, simplify = FALSE)) %>%
.[,method := rep(c("max", "tp", "UUm", "mag"), each = nrow(interpval))]
# format(object.size(integrand), unit = "Mb")
# Reduce the blthickness data.table to be smaller
thickness = blthickness[, "thickness" := dist][, c("surf", "xO", "method", "thickness")]
# Right Join with integrand
integrand = interpval[blthickness, on = c("surf", "xO", "method")] %>%
# Filter only columns in the thickness
.[dist < thickness]
integrand[]
integrand = interpval[thickness, on = c("surf", "xO", "method")] %>%
# Filter only columns in the thickness
.[dist < thickness]
integrand[]
