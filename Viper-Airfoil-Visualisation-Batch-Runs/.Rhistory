print(n38)
print(ntr)
nptr = ntr
integrandtr = integrand[1:(nptr + 1),]
integrandtr
distancestr = 1/2 * h *
(2 * apply(integrandtr, 2, sum) -
integrandtr[1,] -
integrandtr[ntr + 1,])
distancestr
np38 = (3*n38 + 1)  # Number of points in the integrand for 3/8
np38
integrand38 = integrand[(nptr + 1):(nptr + np38),]
integrand38
distances38 = 3/8 * h *
(3 * apply(integrand38, 2, sum) -
apply(integrand38[rep(c(TRUE, FALSE, FALSE), length.out = np38),], 2, sum) -
integrand38[1,] -
integrand38[np38,])
distances
asdf <- function(length.out) {
test = seq(1, 2, length.out = length.out)
integrand = data.frame(lin = test, para = test^2, cubic = test^3, quartic = test^4, sin = sin(test))
n = nrow(integrand)
print(n)
h = test[2] - test[1]
n38 = (n - 1) %/% 3 # Number of 3/8 rules to be applied
ntr = (n - 1) %% 3  # Number of trap rules to be applied (at the end)
print(n38)
print(ntr)
# Trap Rule
nptr = ntr
integrandtr = integrand[1:(nptr + 1),]
distancestr = 1/2 * h *
(2 * apply(integrandtr, 2, sum) -
integrandtr[1,] -
integrandtr[ntr + 1,])
# 3/8 Rule
np38 = (3*n38 + 1)  # Number of points in the integrand for 3/8
integrand38 = integrand[(nptr + 1):(nptr + np38),]
distances38 = 3/8 * h *
(3 * apply(integrand38, 2, sum) -
apply(integrand38[rep(c(TRUE, FALSE, FALSE), length.out = np38),], 2, sum) -
integrand38[1,] -
integrand38[np38,])
distances = distances38 + distancestr
print(distances)
}
asdf(8)
asdf(9)
asdf(10)
asdf(11)
asdf(1)
asdf(2)
asdf(0)
asdf(10)
asdf(11)
asdf(1)
asdf(2)
integrand
a = data.frame(b = numeric(0), c =  numeric(0))
a
length(a)
as.dataframe(rep(0, 2))
as.data.frame(rep(0, 2))
distances = data.frame(
dispthick = 0, momethick = 0, kinethick = 0
)
distances
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
blvals_old
h1 = 0.01
dist1 = NormalSamp(seq(0, 18, by = h1))
lvec <- NormalLvec(xvec, dist1, AoA, c("upper", "lower"))
rm(dist1)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Search along a smaller distance step
h2 = 2e-5
dist2 = seq(min(blthickness$dist) - h1, max(blthickness$dist)  + h1, by = h2)
dom <- as.matrix(sapply(blthickness$dist,
function(dist) dist2 > (dist - h1) & dist2 < (dist + h1)))
dom = apply(dom, 1, sum)
dom = ifelse(dom != 0, TRUE, FALSE)
dist2 = dist2[dom]
lvec <- NormalLvec(xvec, dist2, AoA, c("upper", "lower"))
rm(dist2)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Determine BL Thickness values
h = 1e-4
dist = seq(0, max(blthickness$dist), by = h)
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
rm(dist)
blvals = BLValues(omesh, lvec, blthickness)
LoadPackages()
h1 = 0.01
dist1 = NormalSamp(seq(0, 18, by = h1))
lvec <- NormalLvec(xvec, dist1, AoA, c("upper", "lower"))
rm(dist1)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Search along a smaller distance step
h2 = 2e-5
dist2 = seq(min(blthickness$dist) - h1, max(blthickness$dist)  + h1, by = h2)
dom <- as.matrix(sapply(blthickness$dist,
function(dist) dist2 > (dist - h1) & dist2 < (dist + h1)))
dom = apply(dom, 1, sum)
dom = ifelse(dom != 0, TRUE, FALSE)
dist2 = dist2[dom]
lvec <- NormalLvec(xvec, dist2, AoA, c("upper", "lower"))
rm(dist2)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Determine BL Thickness values
h = 1e-4
dist = seq(0, max(blthickness$dist), by = h)
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
rm(dist)
blvals = BLValues(omesh, lvec, blthickness)
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
a
a = -0.5
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
xvec
h1 = 0.01
dist1 = NormalSamp(seq(0, 18, by = h1))
lvec <- NormalLvec(xvec, dist1, AoA, c("upper", "lower"))
rm(dist1)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Search along a smaller distance step
h2 = 2e-5
dist2 = seq(min(blthickness$dist) - h1, max(blthickness$dist)  + h1, by = h2)
dom <- as.matrix(sapply(blthickness$dist,
function(dist) dist2 > (dist - h1) & dist2 < (dist + h1)))
dom = apply(dom, 1, sum)
dom = ifelse(dom != 0, TRUE, FALSE)
dist2 = dist2[dom]
lvec <- NormalLvec(xvec, dist2, AoA, c("upper", "lower"))
rm(dist2)
blthickness = BLThickness(omesh, lvec)
rm(lvec)
# Determine BL Thickness values
h = 1e-4
dist = seq(0, max(blthickness$dist), by = h)
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
rm(dist)
blvals = BLValues(omesh, lvec, blthickness)
blvals
blvals_old
blvals - blvals_old
selec(blvals, -surf) - select(blvals_old, -surf)
select(blvals, -surf) - select(blvals_old, -surf)
select(blvals, -surf, -method) - select(blvals_old, -surf, -method)
apply(select(blvals, -surf, -method) - select(blvals_old, -surf, -method), 1, sd)
apply(select(blvals, -surf, -method) - select(blvals_old, -surf, -method), 2, sd)
apply(select(blvals, -surf, -method) - select(blvals_old, -surf, -method), 2, sum)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Serial Debugging.R', echo=TRUE)
bltheory = BLTheory(xvec, AoA, Re)
blvals = BLCalcs(omesh, xvec, AoA, Re)
blplot = rbind(blvals, bltheory)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
# Set working directory when run from RStudio
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("//ad.monash.edu/home/User032/awan39/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs")
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
#--- Initialise the cluster ----
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
filename = filelist[1]
filename
source("Function Load Packages.R")      # For required packages
source("Function pblapply.R")           # For PrintThreadProgress
threadname <- ThreadName()
#--- Load ALL file information  ----
source("Function Load Data.R")          # For fn "Load File"
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); rm(filedata)       # N.B: local so must be passed as fn input
ThreadProgress(threadname, Re, AoA, "File Data Loaded")
#--- Run Airfoil Calculations ----
source("Function Airfoil Profile.R")    # For fn "AirfoilCoord", etc
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
#--- Interpolation on the airfoil----
source("Function Interpolations.R")     # For fn "InterpPoint", etc
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
#--- Interpolation on Normals ----
source("Function Airfoil Normals.R")    # For "AirfoilGrads", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
interpval <- InterpProj(omesh, lvec, plotsurf = TRUE)
# SAVE INTERPVAL then delete it!
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
source("Function Boundary Layers.R")    # For "BLCalcs", etc
source("Function Boundary Layers.R")    # For "BLCalcs", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(xvec, AoA, Re)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
status = paste(ID, "Completed")
status
thread
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Serial Debugging.R', echo=TRUE)
blvals
bltheory
bplot = bind_rows(blvals, bltheory)
bplot = bind_rows(blvals, bltheory)
sapply(blvals, class)
sapply(bltheory, class)
bplot
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
bplot = bind_rows(blvals, bltheory)
sapply(blvals, levels)
sapply(bltheory, levels)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
bplot = bind_rows(blvals, bltheory)
xvec
surf = c("upper", "lower")
class(surf)
lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval)
surfval = surf[1]
lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval)
asdf <- lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval)
sapply(asdf[[1]], levels)
factor(c("upper", "lower"), levels = c("lower", "upper"))
surf = factor(c("upper", "lower"), levels = c("lower", "upper"))
factor(c("upper", "lower"), levels = c("lower", "upper"))
surf = factor(c("upper", "lower"), levels = c("lower", "upper"))
surfval = surf[1]
asdf <- lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval)
sapply(asdf[[1]], levels)
lvec <- bind_rows(pblapply(
surf,
function(surfval) {
bind_rows(lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval))
}
))
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Airfoil Normals.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Serial Debugging.R', echo=TRUE)
BLTheory <- function(omesh, xvec, AoA, Re, varnames = c("U", "V"),
surf = factor(c("upper", "lower"), levels = c("lower", "upper")),
methodlevels = c("max", "tp", "UUm", "mag", "theory")) {
# Remove x values from a cylindrical approximation
xvec = xvec[xvec > a & xvec < a + c]
# Determine the points for the theoretical distances
lvec <-suppressWarnings(
lvec <- bind_rows(pblapply(surf,
function(surfval) {
bind_rows(lapply(xvec,
function(x) {
dist = 5 * (x - a) / sqrt(Re * (x - a))
NormalPoint(x, dist, AoA, surf = surfval)
}))
})))
interpval <- InterpProj(omesh, lvec, varnames = varnames, plotsurf = FALSE) %>%
select(xp, yp, xO, dist, surf, Udash, Vdash, UUmdash)
bltheory = data.frame(
interpval, thickness = interpval$dist, method = factor("theory", levels = methodlevels)
)
}
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Serial Debugging.R', echo=TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Airfoil Normals.R', echo=TRUE)
bltheory = BLTheory(omesh, xvec, AoA, Re)
blvals = BLCalcs(omesh, xvec, AoA, Re)
NormalLvec <- function(xvec, dist, AoA = 0,
surf = factor(c("upper", "lower"), levels = c("lower", "upper"))) {
# Combine various x and surfvals efficiently using lapply and single gradint call
suppressWarnings(
lvec <- bind_rows(pblapply(
surf,
function(surfval) {
bind_rows(lapply(xvec, NormalPoint,
dist = dist, AoA = AoA, surf = surfval))
}
))
)
return(lvec)
}
blvals = BLCalcs(omesh, xvec, AoA, Re)
loadp
LoadPackages\
LoadPackages
LoadPackages()
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Serial Debugging.R', echo=TRUE)
blplot = bind_rows(blvals, bltheory)
rm(bplot)
ggplot(blplot, aes(x = xp, y = yp), group = interaction(surf,  method)) +
geom_path()
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path()
#--- Boundary Layer Calculations ----
source("Function Boundary Layers.R")    # For "BLCalcs", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
blplot = bind_rows(blvals, bltheory)
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path()
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path()
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
xlim(c(-1, NA))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
xlim(c(-1, NA)) + ylim(c(-0.5, 0.5))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, NA), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, NA), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path()
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, 1), ylim = c(-1, 1))
(
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path() +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(aes(size = 1.2)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 1.2) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 0.5) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 1) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 0.8) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_smooth(size = 0.8) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
?geom_smooth
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_smooth(size = 0.8, method = "auto", se = FALSE) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
blplot = bind_rows(blvals, bltheory)
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 0.8, method = "auto", se = FALSE) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 0.8, method = "auto", se = FALSE) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(size = 0.8, method = "auto", se = FALSE) +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
airfoilcoord
ggplot() +
geom_path(blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.8, method = "auto", se = FALSE) +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.8, method = "auto", se = FALSE) +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method)) +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.7) +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.9) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 0.9) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
theme_set(theme_bw())
options(scipen = 10)
ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.9) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 0.9) +
coord_fixed(xlim = c(-1, 0.6), ylim = c(-0.3, 0.3))
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(cl)
stopCluster(cl)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
testplot <- ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.9) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 0.9) +
coord_fixed(xlim = c(-1.2, 0.8), ylim = c(-0.8, 0.8)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer w/ Different Methods"))
savepath = "Output_Data"
ggsave(paste0("Greg_", ID, "_Airfoil.png"), plot = testplot, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
# Set working directory when run from RStudio
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# setwd("//ad.monash.edu/home/User032/awan39/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs")
#--- Load MINIMAL source files for use ----
source("Function Load Packages.R")
# Note: Write out which folder(s) have been run and read them to determine which folder/s need to be run
# Alternavtively, you can have a list of which files have been run (more messy?)
# Or, you can automatically move the files out of the folder and then read them (more complicated!)
# AND order the list!
foldername = "Input_Data"
filelist <- list.files(foldername, pattern = "*.dat")
# Load the Airfoil
source("Function Load Data.R")
NACA = 4412
airfoildata <- LoadAirfoil(NACA, a = -0.5, c = 1)
# Load the pblapply wrapper to use (for progress bar)
source("Function pblapply.R")
#--- Initialise the cluster ----
logfile = paste0(format(Sys.time(), "%Y-%m-%dT%H.%M.%S"), ".txt") # logfile
filename = filelist[1]
#--- Load Packages ----
source("Function Load Packages.R")      # For required packages
#--- Print Progress ----
source("Function pblapply.R")           # For PrintThreadProgress
threadname <- ThreadName()
#--- Load ALL file information  ----
source("Function Load Data.R")          # For fn "Load File"
# Load the filedata and unlist it
filedata <- LoadFile(filename, foldername)
list2env(filedata, envir = environment()); rm(filedata)       # N.B: local so must be passed as fn input
ThreadProgress(threadname, Re, AoA, "File Data Loaded")
#--- Run Airfoil Calculations ----
source("Function Airfoil Profile.R")    # For fn "AirfoilCoord", etc
list2env(airfoildata, envir = .GlobalEnv)                     # N.B: global so all fn can find it
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
ThreadProgress(threadname, Re, AoA, "Airfoil Coordinates Calculated")
#--- Interpolation on the airfoil----
source("Function Interpolations.R")     # For fn "InterpPoint", etc
airfoilsurfmesh <- InterpPoint(omesh, airfoilcoord, varnames = c("P", "vort_xy_plane"))
ThreadProgress(threadname, Re, AoA, "Airfoil Surface Interpolation Calculated")
#--- Interpolation on Normals ----
source("Function Airfoil Normals.R")    # For "AirfoilGrads", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.5), cylinder = TRUE)
dist = NormalSamp(seq(0, 1.5, by = 0.05))
# Find the combined lvec for interpolation
lvec <- NormalLvec(xvec, dist, AoA, c("upper", "lower"))
interpval <- InterpProj(omesh, lvec, plotsurf = TRUE)
# SAVE INTERPVAL then delete it!
ThreadProgress(threadname, Re, AoA, "Interpolation on Normals to Surface Calculated")
#--- Boundary Layer Calculations ----
source("Function Boundary Layers.R")    # For "BLCalcs", etc
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
blvals = BLCalcs(omesh, xvec, AoA, Re)
bltheory = BLTheory(omesh, xvec, AoA, Re)
blplot = bind_rows(blvals, bltheory)
theme_set(theme_bw())
options(scipen = 10)
testplot <- ggplot() +
geom_path(data = blplot, aes(x = xp, y = yp, group = interaction(surf,  method), colour = method), size = 0.9) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 0.9) +
coord_fixed(xlim = c(-1.2, 0.8), ylim = c(-0.8, 0.8)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer w/ Different Methods"))
savepath = "Output_Data"
ggsave(paste0("Greg_", ID, "_Airfoil.png"), plot = testplot, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
