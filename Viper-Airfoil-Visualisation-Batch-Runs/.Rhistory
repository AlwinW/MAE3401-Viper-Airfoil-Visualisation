blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf)),
size = 1.2) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
print("Boundary Layers Plotted") # Print----
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
print("Files Loaded") # Print----
#--- Airfoil profile and plot ----
# Airfoil coordinates
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Airfoil COordinates Plotted") # Print----
#--- Interpolation on Airfoil ----
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
plot_pressure = ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
ggsave(paste0(ID, "_Pressure.png"), plot = plot_pressure, path = savepath,
width = 5, height = 4, scale = 1.2, dpi = 300)
print("Pressure on Airfoil Plotted") # Print----
#--- Interpolation on Normals ----
# xvec by = 0.05 and dist = 0.05 approx 2min for U and 2min for L on my laptop
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
dist = NormalSamp(seq(0, 0.8, by = 0.05))
# Upper Surface
interpvalU <- pblapply(xvec, function(x) {
# Find the interpolations
lvec = NormalPoint(x, dist, AoA, surf = "upper")
interp <- InterpProj(omesh, lvec)
return(interp)
})
?ggsave
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
xvec
xO = xvec[1]
surf = "upper"
gradint <- AirfoilGrads(xO, surf = surf)
blthickness <- BLThickOptim(omesh, xO, surf = surf, AoA, gradint = gradint)
upper = 18
blresult = OptimDom(omesh, xO, surf, AoA, gradint = gradint, upper = upper, target = 0)
blU = blresult$Udash - abs(blresult$Udash)*0.01
blU
blresult
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(parallelCluster)
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
threaddata = folderdata[[1]]
list2env(threaddata, envir = .GlobalEnv)
omesh = filedata
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
print("Files Loaded") # Print----
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = TRUE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf)),
size = 1.2) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
print("Boundary Layers Plotted") # Print----
ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf)),
size = 1.2) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = FALSE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_line(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf)),
size = 1.2) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
plot_BL_Rough
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = FALSE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_path(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
load("C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Working_Data/SingleThreadTest3.RData")
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = FALSE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_path(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = FALSE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_path(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
print("Boundary Layers Plotted") # Print----
xvec = AirfoilSamp(seq(a, a+c, by = 0.1), cylinder = FALSE)
# Upper Surface
blvalU <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "upper", AoA)
return(blval)
})
# Lower Surface
blvalL <- pblapply(xvec, function(x) {
# Find the thicknesses
blval = BLCalcs(omesh, x, surf = "lower", AoA)
return(blval)
})
blvalLong <- bind_rows(c(blvalU, blvalL))
# Upper Surface
plot_BL_Rough <- ggplot() +
geom_path(data = blvalLong,
aes(x = xp, y = yp, colour = bldistname,
group = interaction(bldistname, surf))) +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(-1.2, 0.8) +
ylim(-0.8, 0.8) +
scale_color_discrete("BL Distance") +
coord_fixed() +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Boundary Layer"))
ggsave(paste0(ID, "_BL_Rough.png"), plot = plot_BL_Rough, path = savepath,
width = 6, height = 4, scale = 1.2, dpi = 300)
print("Boundary Layers Plotted") # Print----
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
stopCluster(parallelCluster)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Rough Parallel Runs.R', echo=TRUE)
which.max(c(1, 3, 3, 2))
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Boundary Layers.R', echo=TRUE)
?clusterEvalQ
?sink
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function Install Packages.R', echo=TRUE)
library(akima)
rm(akima)
library(MASS)
detach("package:MASS", unload = TRUE)
suppressWarnings(detach("package:MASS", unload = TRUE))
suppressWarnings(library(MASS))
detach("package:MASS", unload = TRUE)
?Sys.time
format(Sys.time(), %e)
format(Sys.time(), "%e")
format(Sys.time(), "%F")
format(Sys.time(), "%Y-%m-%d")
format(Sys.time(), "%k")
format(Sys.time(), "%c")
format(Sys.time(), "%S")
format(Sys.time(), "%S")
format(Sys.time(), "%OS")
format(Sys.time(), "%OS")
format(Sys.time(), "%OS")
format(Sys.time(), "%Y%m%dT")
format(Sys.time(), "%Y%m%dT%H%M%S")
format(Sys.time(), "%Y-%m-%dT%H%M%S")
format(Sys.time(), "%Y-%m-%dT%H%M%S%Z")
format(Sys.time(), "%Y-%m-%dT%H%M%S%z")
InterpProj <- function(omesh, lvec, varnames = c("U", "V", "P", "vort_xy_plane"),
linear = TRUE, extrap = FALSE, plotsurf = FALSE) {
# Interpolate  to find the varibles
lmesh <- InterpPoint(omesh, lvec, varnames, linear, extrap)
# Use vector projection parallel to the normal
lmesh <- lmesh %>%
mutate(surf = ifelse(plotsurf == TRUE & surf == "upper" & dely > 0, "upper", "lower")) %>%
mutate(surf = ifelse(plotsurf == TRUE & surf == "lower" & dely < 0, "lower", "upper")) %>%
# Udash and Vdash found by using vector projections
mutate(Udash = sqrt((U - (delx*U + dely*V)/dist^2 * delx)^2 + (V - (delx*U + dely*V)/dist^2 * dely)^2),
Vdash = (delx*U + dely*V)/dist) %>%
mutate(Udash = ifelse(dist != 0, Udash, 0),
Vdash = ifelse(dist != 0, Vdash, 0)) %>%
# sign of Udash found by cross product, upper vs lower
mutate(Udash = sign(dely*U - delx*V) * ifelse(surf == "upper", 1, -1) * Udash)
# print(paste(lmesh$dist, lmesh$Udash))
return(lmesh)
}
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
parallelCluster <-
makeCluster(detectCores(), outfile = paste0(format(Sys.time(), "%Y-%m-%dT%H%M%S%z"), ".txt"))
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
scale_y_reverse() +
scale_color_manual("Surface", values = c("#F8766D", "#00BBCC"), labels = c("Lower","Upper")) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
threaddata = folderdata[[1]]
list2env(threaddata, envir = .GlobalEnv)
omesh = filedata
ThreadAll <- function(ID, Re, AoA, filepath, omesh, airfoildata) {
#--- Functions for the Thread ----
set <- getAllConnections()
thread <-  unlist(summary.connection(set[length(set)]))[1]
thread <- paste(thread, sprintf("%04d", Sys.getpid()), ":")
PrintThread <- function(msg) {
cat(paste(thread, ID, format(Sys.time(), "%X"), "|", msg, "\n"))
}
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
set <- getAllConnections()
thread <-  unlist(summary.connection(set[length(set)]))[1]
thread <- paste(thread, sprintf("%04d", Sys.getpid()), ":")
PrintThread <- function(msg) {
cat(paste(thread, ID, format(Sys.time(), "%X"), "|", msg, "\n"))
}
#--- Required files ----
source("Function Install Packages.R")
LoadPackages()
source("Plot Settings.R")
savepath = "Output_Data"
source("Function Airfoil Profile.R")
source("Function Airfoil Normals.R")
source("Function Interpolations.R")
source("Function Boundary Layers.R")
#--- Manipulate input data ----
# Expand the airfoil data into the current thread environment
list2env(airfoildata, envir = .GlobalEnv)
airfoilcoord <- AirfoilCoord(a, c + a, AoA, res = 100)
airfoilmesh <- InterpPoint(omesh, airfoilcoord)
ggplot(airfoilmesh, aes(x = x, y = P, colour = surf)) +
geom_path(size = 1.2) +
geom_point() +
scale_y_reverse() +
scale_color_manual("Surface", values = c("#F8766D", "#00BBCC"), labels = c("Lower","Upper")) +
labs(title = paste("Re Number", Re, "and", "AoA", AoA, "deg: Pressure on Airfoil"))
===============================================================
rep("=",56)
paste0(rep("=",56))
load("/media/alwin/OS/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Working_Data/SingleThreadTest3.RData")
# Set working directory when run from RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
source('/media/alwin/OS/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-Batch-Runs/Function pblapply.R', echo=TRUE)
# Set working directory when run from RStudio
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
source("Functin pblapply.R")
parallelCluster <-
makeCluster(detectCores(), outfile = paste0(format(Sys.time(), "%Y-%m-%dT%H%M%S%z"), ".txt"))
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
source("Functin pblapply.R")
source("Function pblapply.R")
parallelCluster <-
makeCluster(detectCores(), outfile = paste0(format(Sys.time(), "%Y-%m-%dT%H%M%S%z"), ".txt"))
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
showConnections()
)
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("Function Install Packages.R")
LoadPackages()
source("Function Load Data.R")
NACA = 4412
airfoildata <- AirfoilData(NACA, -0.5, 1)
folderdata <- LoadFolder()
source("Thread Function Calls.R")
source("Function pblapply.R")
stopCluster(parallelCluster)
stopCluster(parallelCluster)
parallelCluster <-
makeCluster(detectCores(), outfile = paste0(format(Sys.time(), "%Y-%m-%dT%H%M%S%z"), ".txt"))
clusterExport(parallelCluster, c("airfoildata", "ThreadAll"))
a1 <- pblapply(
folderdata,
function(filedata) {
with(filedata, ThreadAll(ID, Re, AoA, filepath, filedata, airfoildata))},
cl = parallelCluster
)
stopCluster(parallelCluster)
