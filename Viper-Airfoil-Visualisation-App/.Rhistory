xvec = c(xadd, xvec)
if (cylinder == "only")
xvec = xadd
}
# Remove any unecessary LE
LE = match(a, xvec)
# xvec[LE] = a - sign(a)*abs(a)*del
# if (!is.na(LE) & xvec[LE] > xvec[LE +1])
#   xvec = xvec[-LE]
if (xvec[LE] == a)
xvec = xvec[-LE]
# Adjust the TE value
if (xvec[length(xvec)] == a + c)
xvec[length(xvec)] = a + c - sign(a + c)*abs(a + c)*del
return(xvec)
}
#----------------------------
#--- Rough Running Script to Test Functions
#============================
#--- Source Files ----
source("Helper Install Packages.R")
source("Function Load Data.R")
source("Function Airfoil Profile.R")
source("Function Interpolation.R")
#--- Initial Data ----
filedata <- LoadData("test.dat") ## CHANGE THIS TO YOUR FILE
NACA = 4412
a = -0.5
c = 1
AoA = 10 ## CHANGE THIS TO YOUR AoA
Re = 50
airfoildata <- AirfoilData(NACA, a, c)
#--- Sample Airfoil Plot ----
airfoilcoord <- AirfoilCoord(AoA = AoA, res = 100)
ggplot(airfoilcoord, aes(x = x, y = y, colour = surf)) +
geom_path() +
geom_point() +
coord_fixed()
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
AirfoilSamp <- function(xvec, del = c*8e-6, cylinder = FALSE) {
# xvec = seq(a, a+c, by = 0.01)
# Sample according to a cubic function
xvec = -2*a/c^3 * (xvec - a)^3 + a
# Add extra x values for interpolation
if (cylinder != FALSE & xvec[1] == a) {
# Determine the number of points from -theta_c to theta_c
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd = xadd[-(xadd == -0.0001)]
# 'encode it' and combine
xadd = a - abs(a) + xadd
# Return the result depending on what's required
if (cylinder == TRUE)
xvec = c(xadd, xvec)
if (cylinder == "only")
xvec = xadd
}
# Remove any unecessary LE
LE = match(a, xvec)
# xvec[LE] = a - sign(a)*abs(a)*del
# if (!is.na(LE) & xvec[LE] > xvec[LE +1])
#   xvec = xvec[-LE]
if (xvec[LE] == a)
xvec = xvec[-LE]
# Adjust the TE value
if (xvec[length(xvec)] == a + c)
xvec[length(xvec)] = a + c - sign(a + c)*abs(a + c)*del
return(xvec)
}
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
AirfoilSamp <- function(xvec, del = c*8e-6, cylinder = FALSE) {
# xvec = seq(a, a+c, by = 0.01)
# Sample according to a cubic function
xvec = -2*a/c^3 * (xvec - a)^3 + a
# Add extra x values for interpolation
if (cylinder != FALSE & xvec[1] == a) {
# Determine the number of points from -theta_c to theta_c
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd = xadd[-(xadd == -0.0001)]
# 'encode it' and combine
xadd = a - abs(a) + xadd
# Return the result depending on what's required
if (cylinder == TRUE)
xvec = c(xadd, xvec)
if (cylinder == "only")
xvec = xadd
}
# Remove any unecessary LE
LE = match(a, xvec)
# xvec[LE] = a - sign(a)*abs(a)*del
# if (!is.na(LE) & xvec[LE] > xvec[LE +1])
#   xvec = xvec[-LE]
if (xvec[LE] == a)
xvec = xvec[-LE]
# Adjust the TE value
if (xvec[length(xvec)] == a + c)
xvec[length(xvec)] = a + c - sign(a + c)*abs(a + c)*del
return(xvec)
}
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
AirfoilSamp <- function(xvec, del = c*8e-6, cylinder = FALSE) {
# xvec = seq(a, a+c, by = 0.01)
# Sample according to a cubic function
xvec = -2*a/c^3 * (xvec - a)^3 + a
# Add extra x values for interpolation
if (cylinder != FALSE & xvec[1] == a) {
# Determine the number of points from -theta_c to theta_c
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd = xadd[-(xadd == -thetac)]
# 'encode it' and combine
xadd = a - abs(a) + xadd
# Return the result depending on what's required
if (cylinder == TRUE)
xvec = c(xadd, xvec)
if (cylinder == "only")
xvec = xadd
}
# Remove any unecessary LE
LE = match(a, xvec)
# xvec[LE] = a - sign(a)*abs(a)*del
# if (!is.na(LE) & xvec[LE] > xvec[LE +1])
#   xvec = xvec[-LE]
if (xvec[LE] == a)
xvec = xvec[-LE]
# Adjust the TE value
if (xvec[length(xvec)] == a + c)
xvec[length(xvec)] = a + c - sign(a + c)*abs(a + c)*del
return(xvec)
}
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd = xadd[-(xadd == -thetac)]
xadd
thetac
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd
xadd = xadd[-(xadd == -thetac)]
xadd
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd
xadd == -thetac
xadd[xadd != -thetac]
AirfoilSamp <- function(xvec, del = c*8e-6, cylinder = FALSE) {
# xvec = seq(a, a+c, by = 0.01)
# Sample according to a cubic function
xvec = -2*a/c^3 * (xvec - a)^3 + a
# Add extra x values for interpolation
if (cylinder != FALSE & xvec[1] == a) {
# Determine the number of points from -theta_c to theta_c
xadd = seq(-0.0001, -thetac,
length.out = ceiling(length(xvec[xvec < xsamp])/2 + 1))
xadd = xadd[xadd != -thetac]
# 'encode it' and combine
xadd = a - abs(a) + xadd
# Return the result depending on what's required
if (cylinder == TRUE)
xvec = c(xadd, xvec)
if (cylinder == "only")
xvec = xadd
}
# Remove any unecessary LE
LE = match(a, xvec)
# xvec[LE] = a - sign(a)*abs(a)*del
# if (!is.na(LE) & xvec[LE] > xvec[LE +1])
#   xvec = xvec[-LE]
if (xvec[LE] == a)
xvec = xvec[-LE]
# Adjust the TE value
if (xvec[length(xvec)] == a + c)
xvec[length(xvec)] = a + c - sign(a + c)*abs(a + c)*del
return(xvec)
}
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
airfoilcoord <- AirfoilCoord(AoA = AoA, res = 100)
ggplot(airfoilcoord, aes(x = x, y = y, colour = surf)) +
geom_path() +
geom_point() +
coord_fixed()
ggplot() +
geom_path(airfoilcoord, aes(x = x, y = y, colour = surf)) +
geom_point(omesh, aes(x = x, y = y, colour = P)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed()
ggplot() +
geom_path(airfoilcoord, aes(x = x, y = y, colour = surf)) +
#geom_point(omesh, aes(x = x, y = y, colour = P)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed()
ggplot() +
geom_path(airfoilcoord, aes(x = x, y = y, colour = surf))
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y, colour = surf)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed()
plot_airfoil
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed()
plot_airfoil
ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5))
ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P < -0.5), colour = "#3C4BA0") +
geom_point(data = omesh, aes(x = x, y = y, colour = P >  0.5), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5))
ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5))
ggsave("test.png", width = 20, height = 20, dpi = 600)
ggsave("test.png", width = 5, height = 5, dpi = 150)
ggsave("test.png", width = 6, height = 4, dpi = 150)
ggsave("test.png", height = 5, dpi = 300)
ggsave("test.png", width = 5, height = 4, dpi = 300)
ggsave("test.png", width = 10, height = 8, dpi = 300)
ggsave("test.png", width = 7.5, height = 6, dpi = 300)
ID = "test"
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
ggsave(paste(ID, "Airfoil", sep = "_"), plot_airfoil,
width = 5, height = 4, dpi = 300)
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
ggsave(paste(ID, "Airfoil", sep = "_"), plot = plot_airfoil,
width = 5, height = 4, dpi = 300)
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
ggsave(paste(ID, "Airfoil", sep = "_"), plot = plot_airfoil,
width = 5, height = 4, dpi = 300, device = "png")
plot_airfoil = ggplot() +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, dpi = 300)
AoA = -40 ## CHANGE THIS TO YOUR AoA
airfoilcoord <- AirfoilCoord(AoA = AoA, res = 100)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, dpi = 300)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 0.5, dpi = 300)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 1.5, dpi = 300)
# Plot of the airfoil with pressure of the original mesh
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 2, dpi = 300)
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P), size = 1.2) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P), size = 5) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y), size = 1.2) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Re", Re, "and", "AoA", AoA, "Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 1.2, dpi = 300)
plot_airfoil = ggplot() +
geom_point(data = omesh, aes(x = x, y = y, colour = P)) +
geom_point(data = filter(omesh, P < -0.5), aes(x = x, y = y, colour = P), colour = "#3C4BA0") +
geom_point(data = filter(omesh, P >  0.5), aes(x = x, y = y, colour = P), colour = "#BE2828") +
geom_path(data = airfoilcoord, aes(x = x, y = y)) +
xlim(c(-1, 1)) +
ylim(c(-1, 1)) +
coord_fixed() +
scale_colour_gradientn("P", colours = rev(brewer.pal(11, "RdYlBu")), limits = c(-0.5, 0.5)) +
labs(title = paste("Reynolds Number", Re, "and", "Angle of Attack", AoA, "deg: Airfoil"))
# Save the plot
ggsave(paste0(ID, "_Airfoil.png"), plot = plot_airfoil,
width = 5, height = 4, scale = 1.2, dpi = 300)
source('C:/Users/Alwin/Documents/GitHub/MAE3401-Viper-Airfoil-Visualisation/Viper-Airfoil-Visualisation-App/Function Airfoil Profile.R', echo=TRUE)
#--- Sample Plot of Normals to the Airfoil ----
xvec = AirfoilSamp(seq(a, a+c, by = 0.05), cylinder = TRUE)
focusdist = 0.05; totaldist = 0.5; len = 21
normalplot <- ggplot () +
geom_path(data = AoATransform(AirfoilCoord(), AoA = AoA), aes(x = x, y = y), size = 1.2)
for (x in xvec) {
# x value
if (AoA == 1 & x >= a) {
normalplot = normalplot +
geom_vline(xintercept = x, colour = "grey")
}
# acutal plot
for (surf in c("upper", "lower")) {
normalplot = normalplot +
geom_point(data = AirfoilLineGen(x, AoA, surf, eq = "norm", focusdist, totaldist, len),
aes(x = x, y = y))
}
}
normalplot + coord_fixed()
